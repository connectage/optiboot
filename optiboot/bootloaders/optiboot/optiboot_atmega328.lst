
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00007ee6  0000067a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e6  00007900  00007900  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  0000067c  2**0
                  CONTENTS, READONLY
  3 .bss          00000046  00800102  00800102  0000067c  2**0
                  ALLOC
  4 .stab         00001c80  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001066  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00003366  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007900 <main>:
    7900:	cd b7       	in	r28, 0x3d	; 61
    7902:	de b7       	in	r29, 0x3e	; 62
    7904:	25 97       	sbiw	r28, 0x05	; 5
    7906:	de bf       	out	0x3e, r29	; 62
    7908:	cd bf       	out	0x3d, r28	; 61
    790a:	f8 94       	cli
    790c:	11 24       	eor	r1, r1
    790e:	8f ed       	ldi	r24, 0xDF	; 223
    7910:	98 e0       	ldi	r25, 0x08	; 8
    7912:	9e bf       	out	0x3e, r25	; 62
    7914:	8d bf       	out	0x3d, r24	; 61
    7916:	cd b7       	in	r28, 0x3d	; 61
    7918:	de b7       	in	r29, 0x3e	; 62
    791a:	84 b7       	in	r24, 0x34	; 52
    791c:	14 be       	out	0x34, r1	; 52
    791e:	83 ff       	sbrs	r24, 3
    7920:	18 c0       	rjmp	.+48     	; 0x7952 <main+0x52>
    7922:	40 91 ec 08 	lds	r20, 0x08EC	; 0x8008ec <__bss_end+0x7a4>
    7926:	50 91 ed 08 	lds	r21, 0x08ED	; 0x8008ed <__bss_end+0x7a5>
    792a:	60 91 ee 08 	lds	r22, 0x08EE	; 0x8008ee <__bss_end+0x7a6>
    792e:	70 91 ef 08 	lds	r23, 0x08EF	; 0x8008ef <__bss_end+0x7a7>
    7932:	4f 3e       	cpi	r20, 0xEF	; 239
    7934:	5e 4b       	sbci	r21, 0xBE	; 190
    7936:	6d 4a       	sbci	r22, 0xAD	; 173
    7938:	7e 4d       	sbci	r23, 0xDE	; 222
    793a:	59 f4       	brne	.+22     	; 0x7952 <main+0x52>
    793c:	10 92 ec 08 	sts	0x08EC, r1	; 0x8008ec <__bss_end+0x7a4>
    7940:	10 92 ed 08 	sts	0x08ED, r1	; 0x8008ed <__bss_end+0x7a5>
    7944:	10 92 ee 08 	sts	0x08EE, r1	; 0x8008ee <__bss_end+0x7a6>
    7948:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <__bss_end+0x7a7>
    794c:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <__bss_end+0x7a3>
    7950:	c0 d2       	rcall	.+1408   	; 0x7ed2 <appStart>
    7952:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <__bss_end+0x7a3>
    7956:	8f ee       	ldi	r24, 0xEF	; 239
    7958:	9e eb       	ldi	r25, 0xBE	; 190
    795a:	ad ea       	ldi	r26, 0xAD	; 173
    795c:	be ed       	ldi	r27, 0xDE	; 222
    795e:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <__bss_end+0x7a4>
    7962:	90 93 ed 08 	sts	0x08ED, r25	; 0x8008ed <__bss_end+0x7a5>
    7966:	a0 93 ee 08 	sts	0x08EE, r26	; 0x8008ee <__bss_end+0x7a6>
    796a:	b0 93 ef 08 	sts	0x08EF, r27	; 0x8008ef <__bss_end+0x7a7>
    796e:	11 e0       	ldi	r17, 0x01	; 1
    7970:	a0 e0       	ldi	r26, 0x00	; 0
    7972:	b1 e0       	ldi	r27, 0x01	; 1
    7974:	e6 ee       	ldi	r30, 0xE6	; 230
    7976:	fe e7       	ldi	r31, 0x7E	; 126
    7978:	02 c0       	rjmp	.+4      	; 0x797e <cpchk>

0000797a <copy>:
    797a:	05 90       	lpm	r0, Z+
    797c:	0d 92       	st	X+, r0

0000797e <cpchk>:
    797e:	a2 30       	cpi	r26, 0x02	; 2
    7980:	b1 07       	cpc	r27, r17
    7982:	d9 f7       	brne	.-10     	; 0x797a <copy>
    7984:	11 e0       	ldi	r17, 0x01	; 1
    7986:	a2 e0       	ldi	r26, 0x02	; 2
    7988:	b1 e0       	ldi	r27, 0x01	; 1
    798a:	01 c0       	rjmp	.+2      	; 0x798e <clchk>

0000798c <clear>:
    798c:	1d 92       	st	X+, r1

0000798e <clchk>:
    798e:	a8 34       	cpi	r26, 0x48	; 72
    7990:	b1 07       	cpc	r27, r17
    7992:	e1 f7       	brne	.-8      	; 0x798c <clear>
    7994:	85 e0       	ldi	r24, 0x05	; 5
    7996:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    799a:	8a b1       	in	r24, 0x0a	; 10
    799c:	83 60       	ori	r24, 0x03	; 3
    799e:	8a b9       	out	0x0a, r24	; 10
    79a0:	8b b1       	in	r24, 0x0b	; 11
    79a2:	8c 7f       	andi	r24, 0xFC	; 252
    79a4:	8b b9       	out	0x0b, r24	; 11
    79a6:	82 e0       	ldi	r24, 0x02	; 2
    79a8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    79ac:	88 e1       	ldi	r24, 0x18	; 24
    79ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    79b2:	96 e0       	ldi	r25, 0x06	; 6
    79b4:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    79b8:	90 e1       	ldi	r25, 0x10	; 16
    79ba:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    79be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    79c2:	88 e2       	ldi	r24, 0x28	; 40
    79c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    79c8:	55 9a       	sbi	0x0a, 5	; 10
    79ca:	8a b1       	in	r24, 0x0a	; 10
    79cc:	8a b9       	out	0x0a, r24	; 10
    79ce:	34 d1       	rcall	.+616    	; 0x7c38 <flash_led.constprop.5>
    79d0:	84 b1       	in	r24, 0x04	; 4
    79d2:	88 62       	ori	r24, 0x28	; 40
    79d4:	84 b9       	out	0x04, r24	; 4
    79d6:	24 98       	cbi	0x04, 4	; 4
    79d8:	22 9a       	sbi	0x04, 2	; 4
    79da:	1c bc       	out	0x2c, r1	; 44
    79dc:	80 e5       	ldi	r24, 0x50	; 80
    79de:	8c bd       	out	0x2c, r24	; 44
    79e0:	11 e0       	ldi	r17, 0x01	; 1
    79e2:	1d bd       	out	0x2d, r17	; 45
    79e4:	8d b5       	in	r24, 0x2d	; 45
    79e6:	8e b5       	in	r24, 0x2e	; 46
    79e8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <radio_present>
    79ec:	20 9a       	sbi	0x04, 0	; 4
    79ee:	22 9a       	sbi	0x04, 2	; 4
    79f0:	80 e9       	ldi	r24, 0x90	; 144
    79f2:	91 e0       	ldi	r25, 0x01	; 1
    79f4:	ed d0       	rcall	.+474    	; 0x7bd0 <delay8>
    79f6:	28 98       	cbi	0x05, 0	; 5
    79f8:	f7 d0       	rcall	.+494    	; 0x7be8 <nrf24_csn.part.0>
    79fa:	80 e1       	ldi	r24, 0x10	; 16
    79fc:	97 e2       	ldi	r25, 0x27	; 39
    79fe:	e8 d0       	rcall	.+464    	; 0x7bd0 <delay8>
    7a00:	6f e7       	ldi	r22, 0x7F	; 127
    7a02:	84 e0       	ldi	r24, 0x04	; 4
    7a04:	0c d1       	rcall	.+536    	; 0x7c1e <nrf24_write_reg>
    7a06:	f2 d0       	rcall	.+484    	; 0x7bec <nrf24_csn.constprop.8>
    7a08:	84 e0       	ldi	r24, 0x04	; 4
    7a0a:	d8 d0       	rcall	.+432    	; 0x7bbc <spi_transfer>
    7a0c:	80 e0       	ldi	r24, 0x00	; 0
    7a0e:	d6 d0       	rcall	.+428    	; 0x7bbc <spi_transfer>
    7a10:	08 2f       	mov	r16, r24
    7a12:	ea d0       	rcall	.+468    	; 0x7be8 <nrf24_csn.part.0>
    7a14:	0f 37       	cpi	r16, 0x7F	; 127
    7a16:	09 f0       	breq	.+2      	; 0x7a1a <clchk+0x8c>
    7a18:	4a c0       	rjmp	.+148    	; 0x7aae <clchk+0x120>
    7a1a:	6e e0       	ldi	r22, 0x0E	; 14
    7a1c:	86 e0       	ldi	r24, 0x06	; 6
    7a1e:	ff d0       	rcall	.+510    	; 0x7c1e <nrf24_write_reg>
    7a20:	63 e0       	ldi	r22, 0x03	; 3
    7a22:	8c e1       	ldi	r24, 0x1C	; 28
    7a24:	fc d0       	rcall	.+504    	; 0x7c1e <nrf24_write_reg>
    7a26:	64 e0       	ldi	r22, 0x04	; 4
    7a28:	8d e1       	ldi	r24, 0x1D	; 29
    7a2a:	f9 d0       	rcall	.+498    	; 0x7c1e <nrf24_write_reg>
    7a2c:	60 e7       	ldi	r22, 0x70	; 112
    7a2e:	87 e0       	ldi	r24, 0x07	; 7
    7a30:	f6 d0       	rcall	.+492    	; 0x7c1e <nrf24_write_reg>
    7a32:	62 e6       	ldi	r22, 0x62	; 98
    7a34:	85 e0       	ldi	r24, 0x05	; 5
    7a36:	f3 d0       	rcall	.+486    	; 0x7c1e <nrf24_write_reg>
    7a38:	63 e0       	ldi	r22, 0x03	; 3
    7a3a:	81 e0       	ldi	r24, 0x01	; 1
    7a3c:	f0 d0       	rcall	.+480    	; 0x7c1e <nrf24_write_reg>
    7a3e:	10 93 46 01 	sts	0x0146, r17	; 0x800146 <radio_present>
    7a42:	82 e0       	ldi	r24, 0x02	; 2
    7a44:	89 83       	std	Y+1, r24	; 0x01
    7a46:	8a 83       	std	Y+2, r24	; 0x02
    7a48:	8b 83       	std	Y+3, r24	; 0x03
    7a4a:	8c 83       	std	Y+4, r24	; 0x04
    7a4c:	8d 83       	std	Y+5, r24	; 0x05
    7a4e:	be 01       	movw	r22, r28
    7a50:	6f 5f       	subi	r22, 0xFF	; 255
    7a52:	7f 4f       	sbci	r23, 0xFF	; 255
    7a54:	8b e0       	ldi	r24, 0x0B	; 11
    7a56:	cc d0       	rcall	.+408    	; 0x7bf0 <nrf24_write_addr_reg>
    7a58:	81 e0       	ldi	r24, 0x01	; 1
    7a5a:	89 83       	std	Y+1, r24	; 0x01
    7a5c:	8a 83       	std	Y+2, r24	; 0x02
    7a5e:	8b 83       	std	Y+3, r24	; 0x03
    7a60:	8c 83       	std	Y+4, r24	; 0x04
    7a62:	8d 83       	std	Y+5, r24	; 0x05
    7a64:	be 01       	movw	r22, r28
    7a66:	6f 5f       	subi	r22, 0xFF	; 255
    7a68:	7f 4f       	sbci	r23, 0xFF	; 255
    7a6a:	80 e1       	ldi	r24, 0x10	; 16
    7a6c:	c1 d0       	rcall	.+386    	; 0x7bf0 <nrf24_write_addr_reg>
    7a6e:	be 01       	movw	r22, r28
    7a70:	6f 5f       	subi	r22, 0xFF	; 255
    7a72:	7f 4f       	sbci	r23, 0xFF	; 255
    7a74:	8a e0       	ldi	r24, 0x0A	; 10
    7a76:	bc d0       	rcall	.+376    	; 0x7bf0 <nrf24_write_addr_reg>
    7a78:	f8 d0       	rcall	.+496    	; 0x7c6a <nrf24_rx_mode>
    7a7a:	de d0       	rcall	.+444    	; 0x7c38 <flash_led.constprop.5>
    7a7c:	10 e0       	ldi	r17, 0x00	; 0
    7a7e:	00 e0       	ldi	r16, 0x00	; 0
    7a80:	98 e1       	ldi	r25, 0x18	; 24
    7a82:	c9 2e       	mov	r12, r25
    7a84:	28 e0       	ldi	r18, 0x08	; 8
    7a86:	b2 2e       	mov	r11, r18
    7a88:	aa 24       	eor	r10, r10
    7a8a:	a3 94       	inc	r10
    7a8c:	35 e0       	ldi	r19, 0x05	; 5
    7a8e:	93 2e       	mov	r9, r19
    7a90:	41 e1       	ldi	r20, 0x11	; 17
    7a92:	84 2e       	mov	r8, r20
    7a94:	53 e0       	ldi	r21, 0x03	; 3
    7a96:	d5 2e       	mov	r13, r21
    7a98:	89 d1       	rcall	.+786    	; 0x7dac <getch>
    7a9a:	81 34       	cpi	r24, 0x41	; 65
    7a9c:	a9 f4       	brne	.+42     	; 0x7ac8 <clchk+0x13a>
    7a9e:	86 d1       	rcall	.+780    	; 0x7dac <getch>
    7aa0:	f8 2e       	mov	r15, r24
    7aa2:	04 d2       	rcall	.+1032   	; 0x7eac <verifySpace>
    7aa4:	e2 e8       	ldi	r30, 0x82	; 130
    7aa6:	fe 12       	cpse	r15, r30
    7aa8:	07 c0       	rjmp	.+14     	; 0x7ab8 <clchk+0x12a>
    7aaa:	80 e0       	ldi	r24, 0x00	; 0
    7aac:	09 c0       	rjmp	.+18     	; 0x7ac0 <clchk+0x132>
    7aae:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <radio_present>
    7ab2:	81 11       	cpse	r24, r1
    7ab4:	c6 cf       	rjmp	.-116    	; 0x7a42 <clchk+0xb4>
    7ab6:	ff cf       	rjmp	.-2      	; 0x7ab6 <clchk+0x128>
    7ab8:	f1 e8       	ldi	r31, 0x81	; 129
    7aba:	85 e0       	ldi	r24, 0x05	; 5
    7abc:	ff 12       	cpse	r15, r31
    7abe:	83 e0       	ldi	r24, 0x03	; 3
    7ac0:	e5 d0       	rcall	.+458    	; 0x7c8c <putch>
    7ac2:	80 e1       	ldi	r24, 0x10	; 16
    7ac4:	e3 d0       	rcall	.+454    	; 0x7c8c <putch>
    7ac6:	e8 cf       	rjmp	.-48     	; 0x7a98 <clchk+0x10a>
    7ac8:	82 34       	cpi	r24, 0x42	; 66
    7aca:	19 f4       	brne	.+6      	; 0x7ad2 <clchk+0x144>
    7acc:	84 e1       	ldi	r24, 0x14	; 20
    7ace:	f4 d1       	rcall	.+1000   	; 0x7eb8 <getNch>
    7ad0:	f8 cf       	rjmp	.-16     	; 0x7ac2 <clchk+0x134>
    7ad2:	85 34       	cpi	r24, 0x45	; 69
    7ad4:	11 f4       	brne	.+4      	; 0x7ada <clchk+0x14c>
    7ad6:	85 e0       	ldi	r24, 0x05	; 5
    7ad8:	fa cf       	rjmp	.-12     	; 0x7ace <clchk+0x140>
    7ada:	85 35       	cpi	r24, 0x55	; 85
    7adc:	49 f4       	brne	.+18     	; 0x7af0 <clchk+0x162>
    7ade:	66 d1       	rcall	.+716    	; 0x7dac <getch>
    7ae0:	08 2f       	mov	r16, r24
    7ae2:	10 e0       	ldi	r17, 0x00	; 0
    7ae4:	63 d1       	rcall	.+710    	; 0x7dac <getch>
    7ae6:	18 2b       	or	r17, r24
    7ae8:	00 0f       	add	r16, r16
    7aea:	11 1f       	adc	r17, r17
    7aec:	df d1       	rcall	.+958    	; 0x7eac <verifySpace>
    7aee:	e9 cf       	rjmp	.-46     	; 0x7ac2 <clchk+0x134>
    7af0:	86 35       	cpi	r24, 0x56	; 86
    7af2:	19 f4       	brne	.+6      	; 0x7afa <clchk+0x16c>
    7af4:	84 e0       	ldi	r24, 0x04	; 4
    7af6:	e0 d1       	rcall	.+960    	; 0x7eb8 <getNch>
    7af8:	d8 cf       	rjmp	.-80     	; 0x7aaa <clchk+0x11c>
    7afa:	84 36       	cpi	r24, 0x64	; 100
    7afc:	09 f0       	breq	.+2      	; 0x7b00 <clchk+0x172>
    7afe:	3e c0       	rjmp	.+124    	; 0x7b7c <clchk+0x1ee>
    7b00:	55 d1       	rcall	.+682    	; 0x7dac <getch>
    7b02:	54 d1       	rcall	.+680    	; 0x7dac <getch>
    7b04:	78 2e       	mov	r7, r24
    7b06:	52 d1       	rcall	.+676    	; 0x7dac <getch>
    7b08:	01 15       	cp	r16, r1
    7b0a:	80 e7       	ldi	r24, 0x70	; 112
    7b0c:	18 07       	cpc	r17, r24
    7b0e:	18 f4       	brcc	.+6      	; 0x7b16 <clchk+0x188>
    7b10:	f8 01       	movw	r30, r16
    7b12:	d7 be       	out	0x37, r13	; 55
    7b14:	e8 95       	spm
    7b16:	20 e8       	ldi	r18, 0x80	; 128
    7b18:	31 e0       	ldi	r19, 0x01	; 1
    7b1a:	f0 e8       	ldi	r31, 0x80	; 128
    7b1c:	7f 0e       	add	r7, r31
    7b1e:	79 01       	movw	r14, r18
    7b20:	45 d1       	rcall	.+650    	; 0x7dac <getch>
    7b22:	f7 01       	movw	r30, r14
    7b24:	81 93       	st	Z+, r24
    7b26:	9f 01       	movw	r18, r30
    7b28:	7e 12       	cpse	r7, r30
    7b2a:	f9 cf       	rjmp	.-14     	; 0x7b1e <clchk+0x190>
    7b2c:	01 15       	cp	r16, r1
    7b2e:	f0 e7       	ldi	r31, 0x70	; 112
    7b30:	1f 07       	cpc	r17, r31
    7b32:	18 f0       	brcs	.+6      	; 0x7b3a <clchk+0x1ac>
    7b34:	f8 01       	movw	r30, r16
    7b36:	d7 be       	out	0x37, r13	; 55
    7b38:	e8 95       	spm
    7b3a:	b8 d1       	rcall	.+880    	; 0x7eac <verifySpace>
    7b3c:	07 b6       	in	r0, 0x37	; 55
    7b3e:	00 fc       	sbrc	r0, 0
    7b40:	fd cf       	rjmp	.-6      	; 0x7b3c <clchk+0x1ae>
    7b42:	f8 01       	movw	r30, r16
    7b44:	a0 e8       	ldi	r26, 0x80	; 128
    7b46:	b1 e0       	ldi	r27, 0x01	; 1
    7b48:	8c 91       	ld	r24, X
    7b4a:	9d 01       	movw	r18, r26
    7b4c:	2e 5f       	subi	r18, 0xFE	; 254
    7b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    7b50:	11 96       	adiw	r26, 0x01	; 1
    7b52:	9c 91       	ld	r25, X
    7b54:	11 97       	sbiw	r26, 0x01	; 1
    7b56:	0c 01       	movw	r0, r24
    7b58:	a7 be       	out	0x37, r10	; 55
    7b5a:	e8 95       	spm
    7b5c:	11 24       	eor	r1, r1
    7b5e:	32 96       	adiw	r30, 0x02	; 2
    7b60:	ae 3f       	cpi	r26, 0xFE	; 254
    7b62:	b1 40       	sbci	r27, 0x01	; 1
    7b64:	49 f4       	brne	.+18     	; 0x7b78 <clchk+0x1ea>
    7b66:	f8 01       	movw	r30, r16
    7b68:	97 be       	out	0x37, r9	; 55
    7b6a:	e8 95       	spm
    7b6c:	07 b6       	in	r0, 0x37	; 55
    7b6e:	00 fc       	sbrc	r0, 0
    7b70:	fd cf       	rjmp	.-6      	; 0x7b6c <clchk+0x1de>
    7b72:	87 be       	out	0x37, r8	; 55
    7b74:	e8 95       	spm
    7b76:	a5 cf       	rjmp	.-182    	; 0x7ac2 <clchk+0x134>
    7b78:	d9 01       	movw	r26, r18
    7b7a:	e6 cf       	rjmp	.-52     	; 0x7b48 <clchk+0x1ba>
    7b7c:	84 37       	cpi	r24, 0x74	; 116
    7b7e:	69 f4       	brne	.+26     	; 0x7b9a <clchk+0x20c>
    7b80:	15 d1       	rcall	.+554    	; 0x7dac <getch>
    7b82:	14 d1       	rcall	.+552    	; 0x7dac <getch>
    7b84:	f8 2e       	mov	r15, r24
    7b86:	12 d1       	rcall	.+548    	; 0x7dac <getch>
    7b88:	91 d1       	rcall	.+802    	; 0x7eac <verifySpace>
    7b8a:	f8 01       	movw	r30, r16
    7b8c:	85 91       	lpm	r24, Z+
    7b8e:	8f 01       	movw	r16, r30
    7b90:	7d d0       	rcall	.+250    	; 0x7c8c <putch>
    7b92:	fa 94       	dec	r15
    7b94:	f1 10       	cpse	r15, r1
    7b96:	f9 cf       	rjmp	.-14     	; 0x7b8a <clchk+0x1fc>
    7b98:	94 cf       	rjmp	.-216    	; 0x7ac2 <clchk+0x134>
    7b9a:	85 37       	cpi	r24, 0x75	; 117
    7b9c:	39 f4       	brne	.+14     	; 0x7bac <clchk+0x21e>
    7b9e:	86 d1       	rcall	.+780    	; 0x7eac <verifySpace>
    7ba0:	8e e1       	ldi	r24, 0x1E	; 30
    7ba2:	74 d0       	rcall	.+232    	; 0x7c8c <putch>
    7ba4:	85 e9       	ldi	r24, 0x95	; 149
    7ba6:	72 d0       	rcall	.+228    	; 0x7c8c <putch>
    7ba8:	8f e0       	ldi	r24, 0x0F	; 15
    7baa:	8a cf       	rjmp	.-236    	; 0x7ac0 <clchk+0x132>
    7bac:	81 35       	cpi	r24, 0x51	; 81
    7bae:	09 f0       	breq	.+2      	; 0x7bb2 <clchk+0x224>
    7bb0:	9d cf       	rjmp	.-198    	; 0x7aec <clchk+0x15e>
    7bb2:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7bb6:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7bba:	98 cf       	rjmp	.-208    	; 0x7aec <clchk+0x15e>

00007bbc <spi_transfer>:
	spi_mode(0);
}

static uint8_t spi_transfer(uint8_t value) {
	uint8_t cnt = 0xff;
	SPDR = value;
    7bbc:	8e bd       	out	0x2e, r24	; 46
    7bbe:	8f ef       	ldi	r24, 0xFF	; 255
    7bc0:	81 50       	subi	r24, 0x01	; 1
	while (cnt -- && !(SPSR & (1 << SPIF)));
    7bc2:	0d b4       	in	r0, 0x2d	; 45
    7bc4:	07 fc       	sbrc	r0, 7
    7bc6:	02 c0       	rjmp	.+4      	; 0x7bcc <spi_transfer+0x10>
    7bc8:	81 11       	cpse	r24, r1
    7bca:	fa cf       	rjmp	.-12     	; 0x7bc0 <spi_transfer+0x4>
	return SPDR;
    7bcc:	8e b5       	in	r24, 0x2e	; 46
}
    7bce:	08 95       	ret

00007bd0 <delay8>:
		CSN_PORT &= ~CSN_PIN;
}

#if 1
static void delay8(uint16_t count) {
	while (count --)
    7bd0:	01 97       	sbiw	r24, 0x01	; 1
    7bd2:	08 f4       	brcc	.+2      	; 0x7bd6 <delay8+0x6>
			"\tnop\n"
			"\tnop\n"
			"\tnop\n"
			"\twdr\n"
		);
}
    7bd4:	08 95       	ret
	...
		__asm__ __volatile__ (
    7be2:	00 00       	nop
    7be4:	a8 95       	wdr
    7be6:	f4 cf       	rjmp	.-24     	; 0x7bd0 <delay8>

00007be8 <nrf24_csn.part.0>:
		CSN_PORT |= CSN_PIN;
    7be8:	2a 9a       	sbi	0x05, 2	; 5
}
    7bea:	08 95       	ret

00007bec <nrf24_csn.constprop.8>:
		CSN_PORT &= ~CSN_PIN;
    7bec:	2a 98       	cbi	0x05, 2	; 5
}
    7bee:	08 95       	ret

00007bf0 <nrf24_write_addr_reg>:
	nrf24_csn(1);

	return ret;
}

static void nrf24_write_addr_reg(uint8_t addr, uint8_t value[5]) {
    7bf0:	1f 93       	push	r17
    7bf2:	cf 93       	push	r28
    7bf4:	df 93       	push	r29
    7bf6:	18 2f       	mov	r17, r24
    7bf8:	eb 01       	movw	r28, r22
	nrf24_csn(0);
    7bfa:	f8 df       	rcall	.-16     	; 0x7bec <nrf24_csn.constprop.8>

	spi_transfer(addr | W_REGISTER);
    7bfc:	81 2f       	mov	r24, r17
    7bfe:	80 62       	ori	r24, 0x20	; 32
    7c00:	dd df       	rcall	.-70     	; 0x7bbc <spi_transfer>
	spi_transfer(value[0]);
    7c02:	88 81       	ld	r24, Y
    7c04:	db df       	rcall	.-74     	; 0x7bbc <spi_transfer>
	spi_transfer(value[1]);
    7c06:	89 81       	ldd	r24, Y+1	; 0x01
    7c08:	d9 df       	rcall	.-78     	; 0x7bbc <spi_transfer>
	spi_transfer(value[2]);
    7c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    7c0c:	d7 df       	rcall	.-82     	; 0x7bbc <spi_transfer>
	spi_transfer(value[3]);
    7c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    7c10:	d5 df       	rcall	.-86     	; 0x7bbc <spi_transfer>
	spi_transfer(value[4]);
    7c12:	8c 81       	ldd	r24, Y+4	; 0x04
    7c14:	d3 df       	rcall	.-90     	; 0x7bbc <spi_transfer>

	nrf24_csn(1);
}
    7c16:	df 91       	pop	r29
    7c18:	cf 91       	pop	r28
    7c1a:	1f 91       	pop	r17
    7c1c:	e5 cf       	rjmp	.-54     	; 0x7be8 <nrf24_csn.part.0>

00007c1e <nrf24_write_reg>:
static void nrf24_write_reg(uint8_t addr, uint8_t value) {
    7c1e:	cf 93       	push	r28
    7c20:	df 93       	push	r29
    7c22:	d8 2f       	mov	r29, r24
	nrf24_csn(0);
    7c24:	c6 2f       	mov	r28, r22
	spi_transfer(addr | W_REGISTER);
    7c26:	e2 df       	rcall	.-60     	; 0x7bec <nrf24_csn.constprop.8>
    7c28:	8d 2f       	mov	r24, r29
    7c2a:	80 62       	ori	r24, 0x20	; 32
    7c2c:	c7 df       	rcall	.-114    	; 0x7bbc <spi_transfer>
	spi_transfer(value);
    7c2e:	8c 2f       	mov	r24, r28
    7c30:	c5 df       	rcall	.-118    	; 0x7bbc <spi_transfer>
    7c32:	df 91       	pop	r29
}
    7c34:	cf 91       	pop	r28
    7c36:	d8 cf       	rjmp	.-80     	; 0x7be8 <nrf24_csn.part.0>

00007c38 <flash_led.constprop.5>:
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7c38:	80 e3       	ldi	r24, 0x30	; 48
    7c3a:	9c ef       	ldi	r25, 0xFC	; 252
    7c3c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    7c40:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
    7c44:	81 e0       	ldi	r24, 0x01	; 1
    7c46:	86 bb       	out	0x16, r24	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7c48:	b0 9b       	sbis	0x16, 0	; 22
    7c4a:	fe cf       	rjmp	.-4      	; 0x7c48 <flash_led.constprop.5+0x10>
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7c4c:	4d 9a       	sbi	0x09, 5	; 9
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7c4e:	a8 95       	wdr
    TCNT1 = -(F_CPU/(1024*16));
    7c50:	80 e3       	ldi	r24, 0x30	; 48
    7c52:	9c ef       	ldi	r25, 0xFC	; 252
    7c54:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    7c58:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
    7c5c:	81 e0       	ldi	r24, 0x01	; 1
    while(!(TIFR1 & _BV(TOV1)));
    7c5e:	86 bb       	out	0x16, r24	; 22
    7c60:	b0 9b       	sbis	0x16, 0	; 22
  __asm__ __volatile__ (
    7c62:	fe cf       	rjmp	.-4      	; 0x7c60 <flash_led.constprop.5+0x28>
}
    7c64:	4d 9a       	sbi	0x09, 5	; 9
    7c66:	a8 95       	wdr
    7c68:	08 95       	ret

00007c6a <nrf24_rx_mode>:
}

static uint8_t nrf24_in_rx = 0;

static void nrf24_rx_mode(void) {
	if (nrf24_in_rx)
    7c6a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <nrf24_in_rx>
    7c6e:	81 11       	cpse	r24, r1
    7c70:	0c c0       	rjmp	.+24     	; 0x7c8a <nrf24_rx_mode+0x20>
		return;

	/* Rx mode */
	nrf24_write_reg(CONFIG, CONFIG_VAL | (1 << PWR_UP) | (1 << PRIM_RX));
    7c72:	6f e7       	ldi	r22, 0x7F	; 127
    7c74:	d4 df       	rcall	.-88     	; 0x7c1e <nrf24_write_reg>
    7c76:	62 e0       	ldi	r22, 0x02	; 2
	/* Only use data pipe 1 for receiving, pipe 0 is for TX ACKs */
	nrf24_write_reg(EN_RXADDR, 0x02);
    7c78:	82 e0       	ldi	r24, 0x02	; 2
    7c7a:	d1 df       	rcall	.-94     	; 0x7c1e <nrf24_write_reg>
    7c7c:	84 e1       	ldi	r24, 0x14	; 20
    7c7e:	90 e0       	ldi	r25, 0x00	; 0
		my_delay(0.01);
    7c80:	a7 df       	rcall	.-178    	; 0x7bd0 <delay8>
    7c82:	28 9a       	sbi	0x05, 0	; 5
    7c84:	81 e0       	ldi	r24, 0x01	; 1
    7c86:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <nrf24_in_rx>

	nrf24_ce(1);

	nrf24_in_rx = 1;
    7c8a:	08 95       	ret

00007c8c <putch>:
void putch(char ch) {
    7c8c:	df 92       	push	r13
    7c8e:	ef 92       	push	r14
    7c90:	ff 92       	push	r15
    7c92:	0f 93       	push	r16
    7c94:	1f 93       	push	r17
    7c96:	cf 93       	push	r28
    7c98:	df 93       	push	r29
  if (radio_mode) {
    7c9a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <radio_mode>
    7c9e:	99 23       	and	r25, r25
    7ca0:	09 f4       	brne	.+2      	; 0x7ca4 <putch+0x18>
    7ca2:	7d c0       	rjmp	.+250    	; 0x7d9e <putch+0x112>
    pkt_buf[pkt_len++] = ch;
    7ca4:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <pkt_len.1919>
    7ca8:	91 e0       	ldi	r25, 0x01	; 1
    7caa:	9e 0f       	add	r25, r30
    7cac:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <pkt_len.1919>
    7cb0:	f0 e0       	ldi	r31, 0x00	; 0
    7cb2:	ec 5d       	subi	r30, 0xDC	; 220
    7cb4:	fe 4f       	sbci	r31, 0xFE	; 254
    if (ch == STK_OK || pkt_len == pkt_max_len) {
    7cb6:	80 83       	st	Z, r24
    7cb8:	80 31       	cpi	r24, 0x10	; 16
    7cba:	19 f0       	breq	.+6      	; 0x7cc2 <putch+0x36>
    7cbc:	90 32       	cpi	r25, 0x20	; 32
    7cbe:	09 f0       	breq	.+2      	; 0x7cc2 <putch+0x36>
    7cc0:	5a c0       	rjmp	.+180    	; 0x7d76 <putch+0xea>
static inline void flash_led(uint8_t);
    7cc2:	10 e8       	ldi	r17, 0x80	; 128
    7cc4:	dd 24       	eor	r13, r13
      while (--cnt) {
    7cc6:	d3 94       	inc	r13
    7cc8:	11 50       	subi	r17, 0x01	; 1
        my_delay(4);
    7cca:	09 f4       	brne	.+2      	; 0x7cce <putch+0x42>
    7ccc:	4c c0       	rjmp	.+152    	; 0x7d66 <putch+0xda>
    7cce:	80 e4       	ldi	r24, 0x40	; 64
    7cd0:	9f e1       	ldi	r25, 0x1F	; 31
        nrf24_tx(pkt_buf, pkt_len);
    7cd2:	7e df       	rcall	.-260    	; 0x7bd0 <delay8>
static inline void getNch(uint8_t); /* "static inline" is a compiler hint to reduce code size */
    7cd4:	00 91 44 01 	lds	r16, 0x0144	; 0x800144 <pkt_len.1919>
    7cd8:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <nrf24_in_rx>
/* Use AVR305 soft-UART instead of hardware UART.         */
    7cdc:	88 23       	and	r24, r24
/* Flash LED when transferring data. For boards without   */
    7cde:	31 f0       	breq	.+12     	; 0x7cec <putch+0x60>
static inline void flash_led(uint8_t);
    7ce0:	80 e9       	ldi	r24, 0x90	; 144
static inline void watchdogReset();
    7ce2:	91 e0       	ldi	r25, 0x01	; 1
    7ce4:	75 df       	rcall	.-278    	; 0x7bd0 <delay8>
#ifdef SOFT_UART
    7ce6:	28 98       	cbi	0x05, 0	; 5
    7ce8:	d0 92 45 01 	sts	0x0145, r13	; 0x800145 <nrf24_in_rx>
    7cec:	6e e7       	ldi	r22, 0x7E	; 126
/* 4.6 WestfW/dkinzer: pass reset cause to app in R2      */
    7cee:	80 e0       	ldi	r24, 0x00	; 0
    7cf0:	96 df       	rcall	.-212    	; 0x7c1e <nrf24_write_reg>
/* 4.5 WestfW: add infrastructure for non-zero UARTS.     */
    7cf2:	61 e0       	ldi	r22, 0x01	; 1
    7cf4:	82 e0       	ldi	r24, 0x02	; 2
    7cf6:	93 df       	rcall	.-218    	; 0x7c1e <nrf24_write_reg>
#define CSN_DDR		DDRB
    7cf8:	79 df       	rcall	.-270    	; 0x7bec <nrf24_csn.constprop.8>
    7cfa:	81 ee       	ldi	r24, 0xE1	; 225
#define CE_PIN		(1 << 0)
    7cfc:	5f df       	rcall	.-322    	; 0x7bbc <spi_transfer>
    7cfe:	74 df       	rcall	.-280    	; 0x7be8 <nrf24_csn.part.0>
    7d00:	75 df       	rcall	.-278    	; 0x7bec <nrf24_csn.constprop.8>
#define CSN_PIN		(1 << 2)
    7d02:	80 ea       	ldi	r24, 0xA0	; 160
    7d04:	5b df       	rcall	.-330    	; 0x7bbc <spi_transfer>
    7d06:	c4 e2       	ldi	r28, 0x24	; 36
    7d08:	d1 e0       	ldi	r29, 0x01	; 1
/*                                                        */
    7d0a:	01 50       	subi	r16, 0x01	; 1
    7d0c:	08 f0       	brcs	.+2      	; 0x7d10 <putch+0x84>
    7d0e:	3b c0       	rjmp	.+118    	; 0x7d86 <putch+0xfa>
    7d10:	6b df       	rcall	.-298    	; 0x7be8 <nrf24_csn.part.0>
/*                                                        */
    7d12:	84 e1       	ldi	r24, 0x14	; 20
/* Version 4 starts with the arduino repository commit    */
    7d14:	90 e0       	ldi	r25, 0x00	; 0
    7d16:	5c df       	rcall	.-328    	; 0x7bd0 <delay8>
/*  the optiboot source tree changes since v3.            */
    7d18:	28 9a       	sbi	0x05, 0	; 5
    7d1a:	68 df       	rcall	.-304    	; 0x7bec <nrf24_csn.constprop.8>
    7d1c:	8f ef       	ldi	r24, 0xFF	; 255
    7d1e:	4e df       	rcall	.-356    	; 0x7bbc <spi_transfer>
    7d20:	c8 2f       	mov	r28, r24
    7d22:	62 df       	rcall	.-316    	; 0x7be8 <nrf24_csn.part.0>
    7d24:	80 e1       	ldi	r24, 0x10	; 16
    7d26:	e8 2e       	mov	r14, r24
    7d28:	87 e2       	ldi	r24, 0x27	; 39
 * RAMSTART should be self-explanatory.  It's bigger on parts with a
    7d2a:	f8 2e       	mov	r15, r24
    7d2c:	dc 2f       	mov	r29, r28
    7d2e:	d0 72       	andi	r29, 0x20	; 32
    7d30:	c5 ff       	sbrs	r28, 5
    7d32:	02 c0       	rjmp	.+4      	; 0x7d38 <putch+0xac>
    7d34:	c0 ff       	sbrs	r28, 0
    7d36:	06 c0       	rjmp	.+12     	; 0x7d44 <putch+0xb8>
    7d38:	c4 fd       	sbrc	r28, 4
    7d3a:	04 c0       	rjmp	.+8      	; 0x7d44 <putch+0xb8>
    7d3c:	81 e0       	ldi	r24, 0x01	; 1
 * lot of peripheral registers.
    7d3e:	e8 1a       	sub	r14, r24
/* Use AVR305 soft-UART instead of hardware UART.         */
    7d40:	f1 08       	sbc	r15, r1
    7d42:	21 f5       	brne	.+72     	; 0x7d8c <putch+0x100>
    7d44:	80 e9       	ldi	r24, 0x90	; 144
/* Flash LED when transferring data. For boards without   */
    7d46:	91 e0       	ldi	r25, 0x01	; 1
#define RAMSTART (0x100)
    7d48:	43 df       	rcall	.-378    	; 0x7bd0 <delay8>
    7d4a:	28 98       	cbi	0x05, 0	; 5
    7d4c:	60 e3       	ldi	r22, 0x30	; 48
    7d4e:	87 e0       	ldi	r24, 0x07	; 7
// correct for a bug in avr-libc
    7d50:	66 df       	rcall	.-308    	; 0x7c1e <nrf24_write_reg>
    7d52:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <nrf24_in_rx>
    7d56:	88 23       	and	r24, r24
#undef SIGNATURE_2
    7d58:	19 f0       	breq	.+6      	; 0x7d60 <putch+0xd4>
    7d5a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <nrf24_in_rx>
#elif defined (__AVR_ATmega1284P__)
    7d5e:	85 df       	rcall	.-246    	; 0x7c6a <nrf24_rx_mode>
#elif defined(__AVR_ATtiny84__)
    7d60:	dd 23       	and	r29, r29
    7d62:	09 f4       	brne	.+2      	; 0x7d66 <putch+0xda>
    7d64:	b1 cf       	rjmp	.-158    	; 0x7cc8 <putch+0x3c>
      pkt_len = 1;
    7d66:	81 e0       	ldi	r24, 0x01	; 1
    7d68:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <pkt_len.1919>
      pkt_buf[0] ++;
    7d6c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <pkt_buf.1920>
    7d70:	8f 5f       	subi	r24, 0xFF	; 255
}
    7d72:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <pkt_buf.1920>
    7d76:	df 91       	pop	r29
    7d78:	cf 91       	pop	r28
    7d7a:	1f 91       	pop	r17

    7d7c:	0f 91       	pop	r16
    7d7e:	ff 90       	pop	r15
    7d80:	ef 90       	pop	r14
    7d82:	df 90       	pop	r13
#if defined(__AVR_ATmega168__)
    7d84:	08 95       	ret
    7d86:	89 91       	ld	r24, Y+
    7d88:	19 df       	rcall	.-462    	; 0x7bbc <spi_transfer>
    7d8a:	bf cf       	rjmp	.-130    	; 0x7d0a <putch+0x7e>
/* Version 4 starts with the arduino repository commit    */
    7d8c:	80 e2       	ldi	r24, 0x20	; 32
    7d8e:	9e e4       	ldi	r25, 0x4E	; 78
/*  the optiboot source tree changes since v3.            */
    7d90:	1f df       	rcall	.-450    	; 0x7bd0 <delay8>
    7d92:	2c df       	rcall	.-424    	; 0x7bec <nrf24_csn.constprop.8>
    7d94:	8f ef       	ldi	r24, 0xFF	; 255
    7d96:	12 df       	rcall	.-476    	; 0x7bbc <spi_transfer>
    7d98:	c8 2f       	mov	r28, r24
    7d9a:	26 df       	rcall	.-436    	; 0x7be8 <nrf24_csn.part.0>
    7d9c:	c7 cf       	rjmp	.-114    	; 0x7d2c <putch+0xa0>
  while (!(UART_SRA & _BV(UDRE0)));
    7d9e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7da2:	95 ff       	sbrs	r25, 5
    7da4:	fc cf       	rjmp	.-8      	; 0x7d9e <putch+0x112>
  UART_UDR = ch;
    7da6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    7daa:	e5 cf       	rjmp	.-54     	; 0x7d76 <putch+0xea>

00007dac <getch>:
uint8_t getch(void) {
    7dac:	0f 93       	push	r16
    7dae:	1f 93       	push	r17
    7db0:	cf 93       	push	r28
    7db2:	df 93       	push	r29
        pkt_start = START;
    7db4:	01 e0       	ldi	r16, 0x01	; 1
    if (radio_present && (pkt_len || nrf24_rx_fifo_data())) {
    7db6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <radio_present>
    if (UART_SRA & _BV(RXC0)) {
    7dba:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7dbe:	97 ff       	sbrs	r25, 7
    7dc0:	0c c0       	rjmp	.+24     	; 0x7dda <getch+0x2e>
      if (!(UART_SRA & _BV(FE0))) {
    7dc2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7dc6:	84 fd       	sbrc	r24, 4
  __asm__ __volatile__ (
    7dc8:	01 c0       	rjmp	.+2      	; 0x7dcc <getch+0x20>
      ch = UART_UDR;
    7dca:	a8 95       	wdr
}
    7dcc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    7dd0:	df 91       	pop	r29
    if (radio_present && (pkt_len || nrf24_rx_fifo_data())) {
    7dd2:	cf 91       	pop	r28
    7dd4:	1f 91       	pop	r17
    7dd6:	0f 91       	pop	r16
    7dd8:	08 95       	ret
    7dda:	88 23       	and	r24, r24
    7ddc:	71 f3       	breq	.-36     	; 0x7dba <getch+0xe>
      if (!pkt_len) {
    7dde:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <pkt_len.1932>
    7de2:	88 23       	and	r24, r24
      ch = pkt_buf[pkt_start ++];
    7de4:	a9 f0       	breq	.+42     	; 0x7e10 <getch+0x64>
    7de6:	a8 95       	wdr
    7de8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <pkt_len.1932>
    7dec:	88 23       	and	r24, r24
    7dee:	d1 f0       	breq	.+52     	; 0x7e24 <getch+0x78>
    7df0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
      pkt_len --;
    7df4:	81 e0       	ldi	r24, 0x01	; 1
    7df6:	8e 0f       	add	r24, r30
  return ch;
    7df8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
/*                                                        */
    7dfc:	f0 e0       	ldi	r31, 0x00	; 0
/* UART number (0..n) for devices with more than          */
    7dfe:	ed 5f       	subi	r30, 0xFD	; 253
    7e00:	fe 4f       	sbci	r31, 0xFE	; 254
/* one hardware uart (644P, 1284P, etc)                   */
    7e02:	80 81       	ld	r24, Z
    7e04:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <pkt_len.1932>
    7e08:	91 50       	subi	r25, 0x01	; 1
    7e0a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <pkt_len.1932>
    if (radio_present && (pkt_len || nrf24_rx_fifo_data())) {
    7e0e:	e0 cf       	rjmp	.-64     	; 0x7dd0 <getch+0x24>
    7e10:	ed de       	rcall	.-550    	; 0x7bec <nrf24_csn.constprop.8>
    7e12:	87 e1       	ldi	r24, 0x17	; 23
#define WATCHDOG_16MS   (_BV(WDE))
    7e14:	d3 de       	rcall	.-602    	; 0x7bbc <spi_transfer>
    7e16:	80 e0       	ldi	r24, 0x00	; 0
    7e18:	d1 de       	rcall	.-606    	; 0x7bbc <spi_transfer>
    7e1a:	c8 2f       	mov	r28, r24
#endif
    7e1c:	e5 de       	rcall	.-566    	; 0x7be8 <nrf24_csn.part.0>
    7e1e:	c0 ff       	sbrs	r28, 0
#else // 0
    7e20:	e2 cf       	rjmp	.-60     	; 0x7de6 <getch+0x3a>
    7e22:	c9 cf       	rjmp	.-110    	; 0x7db6 <getch+0xa>
    7e24:	60 e4       	ldi	r22, 0x40	; 64
#if (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 > 250
    7e26:	87 e0       	ldi	r24, 0x07	; 7
    7e28:	fa de       	rcall	.-524    	; 0x7c1e <nrf24_write_reg>
    7e2a:	e0 de       	rcall	.-576    	; 0x7bec <nrf24_csn.constprop.8>
    7e2c:	80 e6       	ldi	r24, 0x60	; 96
    7e2e:	c6 de       	rcall	.-628    	; 0x7bbc <spi_transfer>
#define WATCHDOG_125MS  (_BV(WDP1) | _BV(WDP0) | _BV(WDE))
    7e30:	80 e0       	ldi	r24, 0x00	; 0
    7e32:	c4 de       	rcall	.-632    	; 0x7bbc <spi_transfer>
#define WATCHDOG_500MS  (_BV(WDP2) | _BV(WDP0) | _BV(WDE))
    7e34:	18 2f       	mov	r17, r24
    7e36:	d8 de       	rcall	.-592    	; 0x7be8 <nrf24_csn.part.0>
#define WATCHDOG_2S     (_BV(WDP2) | _BV(WDP1) | _BV(WDP0) | _BV(WDE))
    7e38:	10 93 23 01 	sts	0x0123, r17	; 0x800123 <pkt_len.1932>
    7e3c:	d7 de       	rcall	.-594    	; 0x7bec <nrf24_csn.constprop.8>
    7e3e:	81 e6       	ldi	r24, 0x61	; 97
    7e40:	bd de       	rcall	.-646    	; 0x7bbc <spi_transfer>
#ifndef __AVR_ATmega8__
    7e42:	c3 e0       	ldi	r28, 0x03	; 3
    7e44:	d1 e0       	ldi	r29, 0x01	; 1
    7e46:	11 50       	subi	r17, 0x01	; 1
        pkt_start = START;
    7e48:	98 f4       	brcc	.+38     	; 0x7e70 <getch+0xc4>
    7e4a:	ce de       	rcall	.-612    	; 0x7be8 <nrf24_csn.part.0>
        radio_mode = 1;
    7e4c:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <__data_end>
        if (!pkt_len)
    7e50:	00 93 47 01 	sts	0x0147, r16	; 0x800147 <radio_mode>
    7e54:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <pkt_len.1932>
        if (pkt_buf[0] == seqn) {
    7e58:	88 23       	and	r24, r24
    7e5a:	09 f4       	brne	.+2      	; 0x7e5e <getch+0xb2>
    7e5c:	ac cf       	rjmp	.-168    	; 0x7db6 <getch+0xa>
    7e5e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pkt_buf.1934>
          pkt_len = 0;
    7e62:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
          continue;
    7e66:	92 13       	cpse	r25, r18
#define WATCHDOG_4S     (_BV(WDP3) | _BV(WDE))
    7e68:	07 c0       	rjmp	.+14     	; 0x7e78 <getch+0xcc>
    7e6a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <pkt_len.1932>
        seqn = pkt_buf[0];
    7e6e:	a3 cf       	rjmp	.-186    	; 0x7db6 <getch+0xa>
    7e70:	80 e0       	ldi	r24, 0x00	; 0
        pkt_len--;
    7e72:	a4 de       	rcall	.-696    	; 0x7bbc <spi_transfer>
    7e74:	89 93       	st	Y+, r24
    7e76:	e7 cf       	rjmp	.-50     	; 0x7e46 <getch+0x9a>
    7e78:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
    7e7c:	81 50       	subi	r24, 0x01	; 1
    7e7e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <pkt_len.1932>
    7e82:	b6 cf       	rjmp	.-148    	; 0x7df0 <getch+0x44>

00007e84 <wait_timeout>:
 * This switches out of Rx mode and leaves the chip in Standby if desired.
 * Otherwise the chip is powered off.  In Standby a new operation will
 * start faster but more current is consumed while waiting.
 */
static void nrf24_idle_mode(uint8_t standby) {
	if (nrf24_in_rx) {
    7e84:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <nrf24_in_rx>
    7e88:	88 23       	and	r24, r24
    7e8a:	21 f0       	breq	.+8      	; 0x7e94 <wait_timeout+0x10>
		my_delay(0.2);
    7e8c:	80 e9       	ldi	r24, 0x90	; 144
    7e8e:	91 e0       	ldi	r25, 0x01	; 1
    7e90:	9f de       	rcall	.-706    	; 0x7bd0 <delay8>
    7e92:	28 98       	cbi	0x05, 0	; 5
		CE_PORT &= ~CE_PIN;
    7e94:	6c e7       	ldi	r22, 0x7C	; 124
			nrf24_write_reg(CONFIG, CONFIG_VAL);
	} else {
		if (standby)
			nrf24_write_reg(CONFIG, CONFIG_VAL | (1 << PWR_UP));
		else
			nrf24_write_reg(CONFIG, CONFIG_VAL);
    7e96:	80 e0       	ldi	r24, 0x00	; 0
    7e98:	c2 de       	rcall	.-636    	; 0x7c1e <nrf24_write_reg>
    7e9a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <nrf24_in_rx>
    7e9e:	88 e1       	ldi	r24, 0x18	; 24
    7ea0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7ea4:	88 e0       	ldi	r24, 0x08	; 8
    7ea6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  WDTCSR = x;
    7eaa:	ff cf       	rjmp	.-2      	; 0x7eaa <wait_timeout+0x26>

00007eac <verifySpace>:
  if (getch() != CRC_EOP)
    7eac:	7f df       	rcall	.-258    	; 0x7dac <getch>
    7eae:	80 32       	cpi	r24, 0x20	; 32
    7eb0:	09 f0       	breq	.+2      	; 0x7eb4 <verifySpace+0x8>
    7eb2:	e8 df       	rcall	.-48     	; 0x7e84 <wait_timeout>
    wait_timeout();
    7eb4:	84 e1       	ldi	r24, 0x14	; 20
    7eb6:	ea ce       	rjmp	.-556    	; 0x7c8c <putch>

00007eb8 <getNch>:
void getNch(uint8_t count) {
    7eb8:	cf 93       	push	r28
    7eba:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7ebc:	77 df       	rcall	.-274    	; 0x7dac <getch>
    7ebe:	c1 50       	subi	r28, 0x01	; 1
    7ec0:	e9 f7       	brne	.-6      	; 0x7ebc <getNch+0x4>
    7ec2:	cf 91       	pop	r28
}
    7ec4:	f3 cf       	rjmp	.-26     	; 0x7eac <verifySpace>

00007ec6 <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7ec6:	e0 e6       	ldi	r30, 0x60	; 96
    7ec8:	f0 e0       	ldi	r31, 0x00	; 0
    7eca:	98 e1       	ldi	r25, 0x18	; 24
    7ecc:	90 83       	st	Z, r25
  WDTCSR = x;
    7ece:	80 83       	st	Z, r24
}
    7ed0:	08 95       	ret

00007ed2 <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7ed2:	e0 e6       	ldi	r30, 0x60	; 96
    7ed4:	f0 e0       	ldi	r31, 0x00	; 0
    7ed6:	98 e1       	ldi	r25, 0x18	; 24
    7ed8:	90 83       	st	Z, r25
  WDTCSR = x;
    7eda:	98 e2       	ldi	r25, 0x28	; 40
    7edc:	90 83       	st	Z, r25
#endif

  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7ede:	28 2e       	mov	r2, r24

  __asm__ __volatile__ (
    7ee0:	ee 27       	eor	r30, r30
    7ee2:	ff 27       	eor	r31, r31
    7ee4:	09 94       	ijmp
