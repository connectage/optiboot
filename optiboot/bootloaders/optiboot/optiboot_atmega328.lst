
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000075d2  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d2  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000668  2**0
                  CONTENTS, READONLY
  3 .bss          00000044  00800102  00800102  00000668  2**0
                  ALLOC
  4 .stab         00001bcc  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000105a  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00003292  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007000 <main>:
    7000:	cd b7       	in	r28, 0x3d	; 61
    7002:	de b7       	in	r29, 0x3e	; 62
    7004:	25 97       	sbiw	r28, 0x05	; 5
    7006:	de bf       	out	0x3e, r29	; 62
    7008:	cd bf       	out	0x3d, r28	; 61
    700a:	f8 94       	cli
    700c:	11 24       	eor	r1, r1
    700e:	8f ed       	ldi	r24, 0xDF	; 223
    7010:	98 e0       	ldi	r25, 0x08	; 8
    7012:	9e bf       	out	0x3e, r25	; 62
    7014:	8d bf       	out	0x3d, r24	; 61
    7016:	cd b7       	in	r28, 0x3d	; 61
    7018:	de b7       	in	r29, 0x3e	; 62
    701a:	84 b7       	in	r24, 0x34	; 52
    701c:	14 be       	out	0x34, r1	; 52
    701e:	83 ff       	sbrs	r24, 3
    7020:	18 c0       	rjmp	.+48     	; 0x7052 <main+0x52>
    7022:	40 91 ec 08 	lds	r20, 0x08EC	; 0x8008ec <__bss_end+0x7a6>
    7026:	50 91 ed 08 	lds	r21, 0x08ED	; 0x8008ed <__bss_end+0x7a7>
    702a:	60 91 ee 08 	lds	r22, 0x08EE	; 0x8008ee <__bss_end+0x7a8>
    702e:	70 91 ef 08 	lds	r23, 0x08EF	; 0x8008ef <__bss_end+0x7a9>
    7032:	4f 3e       	cpi	r20, 0xEF	; 239
    7034:	5e 4b       	sbci	r21, 0xBE	; 190
    7036:	6d 4a       	sbci	r22, 0xAD	; 173
    7038:	7e 4d       	sbci	r23, 0xDE	; 222
    703a:	59 f4       	brne	.+22     	; 0x7052 <main+0x52>
    703c:	10 92 ec 08 	sts	0x08EC, r1	; 0x8008ec <__bss_end+0x7a6>
    7040:	10 92 ed 08 	sts	0x08ED, r1	; 0x8008ed <__bss_end+0x7a7>
    7044:	10 92 ee 08 	sts	0x08EE, r1	; 0x8008ee <__bss_end+0x7a8>
    7048:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <__bss_end+0x7a9>
    704c:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <__bss_end+0x7a5>
    7050:	b7 d2       	rcall	.+1390   	; 0x75c0 <appStart>
    7052:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <__bss_end+0x7a5>
    7056:	8f ee       	ldi	r24, 0xEF	; 239
    7058:	9e eb       	ldi	r25, 0xBE	; 190
    705a:	ad ea       	ldi	r26, 0xAD	; 173
    705c:	be ed       	ldi	r27, 0xDE	; 222
    705e:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <__bss_end+0x7a6>
    7062:	90 93 ed 08 	sts	0x08ED, r25	; 0x8008ed <__bss_end+0x7a7>
    7066:	a0 93 ee 08 	sts	0x08EE, r26	; 0x8008ee <__bss_end+0x7a8>
    706a:	b0 93 ef 08 	sts	0x08EF, r27	; 0x8008ef <__bss_end+0x7a9>
    706e:	11 e0       	ldi	r17, 0x01	; 1
    7070:	a0 e0       	ldi	r26, 0x00	; 0
    7072:	b1 e0       	ldi	r27, 0x01	; 1
    7074:	e2 ed       	ldi	r30, 0xD2	; 210
    7076:	f5 e7       	ldi	r31, 0x75	; 117
    7078:	02 c0       	rjmp	.+4      	; 0x707e <cpchk>

0000707a <copy>:
    707a:	05 90       	lpm	r0, Z+
    707c:	0d 92       	st	X+, r0

0000707e <cpchk>:
    707e:	a2 30       	cpi	r26, 0x02	; 2
    7080:	b1 07       	cpc	r27, r17
    7082:	d9 f7       	brne	.-10     	; 0x707a <copy>
    7084:	11 e0       	ldi	r17, 0x01	; 1
    7086:	a2 e0       	ldi	r26, 0x02	; 2
    7088:	b1 e0       	ldi	r27, 0x01	; 1
    708a:	01 c0       	rjmp	.+2      	; 0x708e <clchk>

0000708c <clear>:
    708c:	1d 92       	st	X+, r1

0000708e <clchk>:
    708e:	a6 34       	cpi	r26, 0x46	; 70
    7090:	b1 07       	cpc	r27, r17
    7092:	e1 f7       	brne	.-8      	; 0x708c <clear>
    7094:	85 e0       	ldi	r24, 0x05	; 5
    7096:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    709a:	8a b1       	in	r24, 0x0a	; 10
    709c:	83 60       	ori	r24, 0x03	; 3
    709e:	8a b9       	out	0x0a, r24	; 10
    70a0:	8b b1       	in	r24, 0x0b	; 11
    70a2:	8c 7f       	andi	r24, 0xFC	; 252
    70a4:	8b b9       	out	0x0b, r24	; 11
    70a6:	82 e0       	ldi	r24, 0x02	; 2
    70a8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    70ac:	88 e1       	ldi	r24, 0x18	; 24
    70ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    70b2:	96 e0       	ldi	r25, 0x06	; 6
    70b4:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    70b8:	90 e1       	ldi	r25, 0x10	; 16
    70ba:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    70be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    70c2:	8f e0       	ldi	r24, 0x0F	; 15
    70c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    70c8:	55 9a       	sbi	0x0a, 5	; 10
    70ca:	4c d1       	rcall	.+664    	; 0x7364 <flash_led.constprop.5>
    70cc:	84 b1       	in	r24, 0x04	; 4
    70ce:	88 62       	ori	r24, 0x28	; 40
    70d0:	84 b9       	out	0x04, r24	; 4
    70d2:	24 98       	cbi	0x04, 4	; 4
    70d4:	22 9a       	sbi	0x04, 2	; 4
    70d6:	1c bc       	out	0x2c, r1	; 44
    70d8:	80 e5       	ldi	r24, 0x50	; 80
    70da:	8c bd       	out	0x2c, r24	; 44
    70dc:	11 e0       	ldi	r17, 0x01	; 1
    70de:	1d bd       	out	0x2d, r17	; 45
    70e0:	8d b5       	in	r24, 0x2d	; 45
    70e2:	8e b5       	in	r24, 0x2e	; 46
    70e4:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <radio_present>
    70e8:	20 9a       	sbi	0x04, 0	; 4
    70ea:	22 9a       	sbi	0x04, 2	; 4
    70ec:	80 e9       	ldi	r24, 0x90	; 144
    70ee:	91 e0       	ldi	r25, 0x01	; 1
    70f0:	05 d1       	rcall	.+522    	; 0x72fc <delay8>
    70f2:	28 98       	cbi	0x05, 0	; 5
    70f4:	0f d1       	rcall	.+542    	; 0x7314 <nrf24_csn.part.0>
    70f6:	80 e1       	ldi	r24, 0x10	; 16
    70f8:	97 e2       	ldi	r25, 0x27	; 39
    70fa:	00 d1       	rcall	.+512    	; 0x72fc <delay8>
    70fc:	6f e7       	ldi	r22, 0x7F	; 127
    70fe:	84 e0       	ldi	r24, 0x04	; 4
    7100:	24 d1       	rcall	.+584    	; 0x734a <nrf24_write_reg>
    7102:	0a d1       	rcall	.+532    	; 0x7318 <nrf24_csn.constprop.8>
    7104:	84 e0       	ldi	r24, 0x04	; 4
    7106:	f0 d0       	rcall	.+480    	; 0x72e8 <spi_transfer>
    7108:	80 e0       	ldi	r24, 0x00	; 0
    710a:	ee d0       	rcall	.+476    	; 0x72e8 <spi_transfer>
    710c:	08 2f       	mov	r16, r24
    710e:	02 d1       	rcall	.+516    	; 0x7314 <nrf24_csn.part.0>
    7110:	0f 37       	cpi	r16, 0x7F	; 127
    7112:	09 f0       	breq	.+2      	; 0x7116 <clchk+0x88>
    7114:	5a c0       	rjmp	.+180    	; 0x71ca <clchk+0x13c>
    7116:	6e e0       	ldi	r22, 0x0E	; 14
    7118:	86 e0       	ldi	r24, 0x06	; 6
    711a:	17 d1       	rcall	.+558    	; 0x734a <nrf24_write_reg>
    711c:	63 e0       	ldi	r22, 0x03	; 3
    711e:	8c e1       	ldi	r24, 0x1C	; 28
    7120:	14 d1       	rcall	.+552    	; 0x734a <nrf24_write_reg>
    7122:	64 e0       	ldi	r22, 0x04	; 4
    7124:	8d e1       	ldi	r24, 0x1D	; 29
    7126:	11 d1       	rcall	.+546    	; 0x734a <nrf24_write_reg>
    7128:	60 e7       	ldi	r22, 0x70	; 112
    712a:	87 e0       	ldi	r24, 0x07	; 7
    712c:	0e d1       	rcall	.+540    	; 0x734a <nrf24_write_reg>
    712e:	62 e6       	ldi	r22, 0x62	; 98
    7130:	85 e0       	ldi	r24, 0x05	; 5
    7132:	0b d1       	rcall	.+534    	; 0x734a <nrf24_write_reg>
    7134:	63 e0       	ldi	r22, 0x03	; 3
    7136:	81 e0       	ldi	r24, 0x01	; 1
    7138:	08 d1       	rcall	.+528    	; 0x734a <nrf24_write_reg>
    713a:	10 93 45 01 	sts	0x0145, r17	; 0x800145 <radio_present>
    713e:	82 e0       	ldi	r24, 0x02	; 2
    7140:	89 83       	std	Y+1, r24	; 0x01
    7142:	8a 83       	std	Y+2, r24	; 0x02
    7144:	8b 83       	std	Y+3, r24	; 0x03
    7146:	8c 83       	std	Y+4, r24	; 0x04
    7148:	8d 83       	std	Y+5, r24	; 0x05
    714a:	be 01       	movw	r22, r28
    714c:	6f 5f       	subi	r22, 0xFF	; 255
    714e:	7f 4f       	sbci	r23, 0xFF	; 255
    7150:	8b e0       	ldi	r24, 0x0B	; 11
    7152:	e4 d0       	rcall	.+456    	; 0x731c <nrf24_write_addr_reg>
    7154:	81 e0       	ldi	r24, 0x01	; 1
    7156:	89 83       	std	Y+1, r24	; 0x01
    7158:	8a 83       	std	Y+2, r24	; 0x02
    715a:	8b 83       	std	Y+3, r24	; 0x03
    715c:	8c 83       	std	Y+4, r24	; 0x04
    715e:	8d 83       	std	Y+5, r24	; 0x05
    7160:	be 01       	movw	r22, r28
    7162:	6f 5f       	subi	r22, 0xFF	; 255
    7164:	7f 4f       	sbci	r23, 0xFF	; 255
    7166:	80 e1       	ldi	r24, 0x10	; 16
    7168:	d9 d0       	rcall	.+434    	; 0x731c <nrf24_write_addr_reg>
    716a:	be 01       	movw	r22, r28
    716c:	6f 5f       	subi	r22, 0xFF	; 255
    716e:	7f 4f       	sbci	r23, 0xFF	; 255
    7170:	8a e0       	ldi	r24, 0x0A	; 10
    7172:	d4 d0       	rcall	.+424    	; 0x731c <nrf24_write_addr_reg>
    7174:	10 d1       	rcall	.+544    	; 0x7396 <nrf24_rx_mode>
    7176:	f6 d0       	rcall	.+492    	; 0x7364 <flash_led.constprop.5>
    7178:	10 e0       	ldi	r17, 0x00	; 0
    717a:	00 e0       	ldi	r16, 0x00	; 0
    717c:	9f ee       	ldi	r25, 0xEF	; 239
    717e:	89 2e       	mov	r8, r25
    7180:	9e eb       	ldi	r25, 0xBE	; 190
    7182:	99 2e       	mov	r9, r25
    7184:	9d ea       	ldi	r25, 0xAD	; 173
    7186:	a9 2e       	mov	r10, r25
    7188:	9e ed       	ldi	r25, 0xDE	; 222
    718a:	b9 2e       	mov	r11, r25
    718c:	28 e1       	ldi	r18, 0x18	; 24
    718e:	c2 2e       	mov	r12, r18
    7190:	38 e0       	ldi	r19, 0x08	; 8
    7192:	73 2e       	mov	r7, r19
    7194:	66 24       	eor	r6, r6
    7196:	63 94       	inc	r6
    7198:	45 e0       	ldi	r20, 0x05	; 5
    719a:	54 2e       	mov	r5, r20
    719c:	51 e1       	ldi	r21, 0x11	; 17
    719e:	45 2e       	mov	r4, r21
    71a0:	63 e0       	ldi	r22, 0x03	; 3
    71a2:	d6 2e       	mov	r13, r22
    71a4:	8f d1       	rcall	.+798    	; 0x74c4 <getch>
    71a6:	10 92 ec 08 	sts	0x08EC, r1	; 0x8008ec <__bss_end+0x7a6>
    71aa:	10 92 ed 08 	sts	0x08ED, r1	; 0x8008ed <__bss_end+0x7a7>
    71ae:	10 92 ee 08 	sts	0x08EE, r1	; 0x8008ee <__bss_end+0x7a8>
    71b2:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <__bss_end+0x7a9>
    71b6:	81 34       	cpi	r24, 0x41	; 65
    71b8:	a9 f4       	brne	.+42     	; 0x71e4 <clchk+0x156>
    71ba:	84 d1       	rcall	.+776    	; 0x74c4 <getch>
    71bc:	f8 2e       	mov	r15, r24
    71be:	ed d1       	rcall	.+986    	; 0x759a <verifySpace>
    71c0:	82 e8       	ldi	r24, 0x82	; 130
    71c2:	f8 12       	cpse	r15, r24
    71c4:	07 c0       	rjmp	.+14     	; 0x71d4 <clchk+0x146>
    71c6:	80 e0       	ldi	r24, 0x00	; 0
    71c8:	09 c0       	rjmp	.+18     	; 0x71dc <clchk+0x14e>
    71ca:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <radio_present>
    71ce:	81 11       	cpse	r24, r1
    71d0:	b6 cf       	rjmp	.-148    	; 0x713e <clchk+0xb0>
    71d2:	ff cf       	rjmp	.-2      	; 0x71d2 <clchk+0x144>
    71d4:	91 e8       	ldi	r25, 0x81	; 129
    71d6:	85 e0       	ldi	r24, 0x05	; 5
    71d8:	f9 12       	cpse	r15, r25
    71da:	83 e0       	ldi	r24, 0x03	; 3
    71dc:	ed d0       	rcall	.+474    	; 0x73b8 <putch>
    71de:	80 e1       	ldi	r24, 0x10	; 16
    71e0:	eb d0       	rcall	.+470    	; 0x73b8 <putch>
    71e2:	e0 cf       	rjmp	.-64     	; 0x71a4 <clchk+0x116>
    71e4:	82 34       	cpi	r24, 0x42	; 66
    71e6:	19 f4       	brne	.+6      	; 0x71ee <clchk+0x160>
    71e8:	84 e1       	ldi	r24, 0x14	; 20
    71ea:	dd d1       	rcall	.+954    	; 0x75a6 <getNch>
    71ec:	f8 cf       	rjmp	.-16     	; 0x71de <clchk+0x150>
    71ee:	85 34       	cpi	r24, 0x45	; 69
    71f0:	11 f4       	brne	.+4      	; 0x71f6 <clchk+0x168>
    71f2:	85 e0       	ldi	r24, 0x05	; 5
    71f4:	fa cf       	rjmp	.-12     	; 0x71ea <clchk+0x15c>
    71f6:	85 35       	cpi	r24, 0x55	; 85
    71f8:	49 f4       	brne	.+18     	; 0x720c <clchk+0x17e>
    71fa:	64 d1       	rcall	.+712    	; 0x74c4 <getch>
    71fc:	08 2f       	mov	r16, r24
    71fe:	10 e0       	ldi	r17, 0x00	; 0
    7200:	61 d1       	rcall	.+706    	; 0x74c4 <getch>
    7202:	18 2b       	or	r17, r24
    7204:	00 0f       	add	r16, r16
    7206:	11 1f       	adc	r17, r17
    7208:	c8 d1       	rcall	.+912    	; 0x759a <verifySpace>
    720a:	e9 cf       	rjmp	.-46     	; 0x71de <clchk+0x150>
    720c:	86 35       	cpi	r24, 0x56	; 86
    720e:	19 f4       	brne	.+6      	; 0x7216 <clchk+0x188>
    7210:	84 e0       	ldi	r24, 0x04	; 4
    7212:	c9 d1       	rcall	.+914    	; 0x75a6 <getNch>
    7214:	d8 cf       	rjmp	.-80     	; 0x71c6 <clchk+0x138>
    7216:	84 36       	cpi	r24, 0x64	; 100
    7218:	09 f0       	breq	.+2      	; 0x721c <clchk+0x18e>
    721a:	3e c0       	rjmp	.+124    	; 0x7298 <clchk+0x20a>
    721c:	53 d1       	rcall	.+678    	; 0x74c4 <getch>
    721e:	52 d1       	rcall	.+676    	; 0x74c4 <getch>
    7220:	38 2e       	mov	r3, r24
    7222:	50 d1       	rcall	.+672    	; 0x74c4 <getch>
    7224:	01 15       	cp	r16, r1
    7226:	e0 e7       	ldi	r30, 0x70	; 112
    7228:	1e 07       	cpc	r17, r30
    722a:	18 f4       	brcc	.+6      	; 0x7232 <clchk+0x1a4>
    722c:	f8 01       	movw	r30, r16
    722e:	d7 be       	out	0x37, r13	; 55
    7230:	e8 95       	spm
    7232:	80 e8       	ldi	r24, 0x80	; 128
    7234:	91 e0       	ldi	r25, 0x01	; 1
    7236:	f0 e8       	ldi	r31, 0x80	; 128
    7238:	3f 0e       	add	r3, r31
    723a:	7c 01       	movw	r14, r24
    723c:	43 d1       	rcall	.+646    	; 0x74c4 <getch>
    723e:	f7 01       	movw	r30, r14
    7240:	81 93       	st	Z+, r24
    7242:	cf 01       	movw	r24, r30
    7244:	3e 12       	cpse	r3, r30
    7246:	f9 cf       	rjmp	.-14     	; 0x723a <clchk+0x1ac>
    7248:	01 15       	cp	r16, r1
    724a:	f0 e7       	ldi	r31, 0x70	; 112
    724c:	1f 07       	cpc	r17, r31
    724e:	18 f0       	brcs	.+6      	; 0x7256 <clchk+0x1c8>
    7250:	f8 01       	movw	r30, r16
    7252:	d7 be       	out	0x37, r13	; 55
    7254:	e8 95       	spm
    7256:	a1 d1       	rcall	.+834    	; 0x759a <verifySpace>
    7258:	07 b6       	in	r0, 0x37	; 55
    725a:	00 fc       	sbrc	r0, 0
    725c:	fd cf       	rjmp	.-6      	; 0x7258 <clchk+0x1ca>
    725e:	f8 01       	movw	r30, r16
    7260:	a0 e8       	ldi	r26, 0x80	; 128
    7262:	b1 e0       	ldi	r27, 0x01	; 1
    7264:	8c 91       	ld	r24, X
    7266:	9d 01       	movw	r18, r26
    7268:	2e 5f       	subi	r18, 0xFE	; 254
    726a:	3f 4f       	sbci	r19, 0xFF	; 255
    726c:	11 96       	adiw	r26, 0x01	; 1
    726e:	9c 91       	ld	r25, X
    7270:	11 97       	sbiw	r26, 0x01	; 1
    7272:	0c 01       	movw	r0, r24
    7274:	67 be       	out	0x37, r6	; 55
    7276:	e8 95       	spm
    7278:	11 24       	eor	r1, r1
    727a:	32 96       	adiw	r30, 0x02	; 2
    727c:	ae 3f       	cpi	r26, 0xFE	; 254
    727e:	b1 40       	sbci	r27, 0x01	; 1
    7280:	49 f4       	brne	.+18     	; 0x7294 <clchk+0x206>
    7282:	f8 01       	movw	r30, r16
    7284:	57 be       	out	0x37, r5	; 55
    7286:	e8 95       	spm
    7288:	07 b6       	in	r0, 0x37	; 55
    728a:	00 fc       	sbrc	r0, 0
    728c:	fd cf       	rjmp	.-6      	; 0x7288 <clchk+0x1fa>
    728e:	47 be       	out	0x37, r4	; 55
    7290:	e8 95       	spm
    7292:	a5 cf       	rjmp	.-182    	; 0x71de <clchk+0x150>
    7294:	d9 01       	movw	r26, r18
    7296:	e6 cf       	rjmp	.-52     	; 0x7264 <clchk+0x1d6>
    7298:	84 37       	cpi	r24, 0x74	; 116
    729a:	69 f4       	brne	.+26     	; 0x72b6 <clchk+0x228>
    729c:	13 d1       	rcall	.+550    	; 0x74c4 <getch>
    729e:	12 d1       	rcall	.+548    	; 0x74c4 <getch>
    72a0:	f8 2e       	mov	r15, r24
    72a2:	10 d1       	rcall	.+544    	; 0x74c4 <getch>
    72a4:	7a d1       	rcall	.+756    	; 0x759a <verifySpace>
    72a6:	f8 01       	movw	r30, r16
    72a8:	85 91       	lpm	r24, Z+
    72aa:	8f 01       	movw	r16, r30
    72ac:	85 d0       	rcall	.+266    	; 0x73b8 <putch>
    72ae:	fa 94       	dec	r15
    72b0:	f1 10       	cpse	r15, r1
    72b2:	f9 cf       	rjmp	.-14     	; 0x72a6 <clchk+0x218>
    72b4:	94 cf       	rjmp	.-216    	; 0x71de <clchk+0x150>
    72b6:	85 37       	cpi	r24, 0x75	; 117
    72b8:	39 f4       	brne	.+14     	; 0x72c8 <clchk+0x23a>
    72ba:	6f d1       	rcall	.+734    	; 0x759a <verifySpace>
    72bc:	8e e1       	ldi	r24, 0x1E	; 30
    72be:	7c d0       	rcall	.+248    	; 0x73b8 <putch>
    72c0:	85 e9       	ldi	r24, 0x95	; 149
    72c2:	7a d0       	rcall	.+244    	; 0x73b8 <putch>
    72c4:	8f e0       	ldi	r24, 0x0F	; 15
    72c6:	8a cf       	rjmp	.-236    	; 0x71dc <clchk+0x14e>
    72c8:	81 35       	cpi	r24, 0x51	; 81
    72ca:	09 f0       	breq	.+2      	; 0x72ce <clchk+0x240>
    72cc:	9d cf       	rjmp	.-198    	; 0x7208 <clchk+0x17a>
    72ce:	80 92 ec 08 	sts	0x08EC, r8	; 0x8008ec <__bss_end+0x7a6>
    72d2:	90 92 ed 08 	sts	0x08ED, r9	; 0x8008ed <__bss_end+0x7a7>
    72d6:	a0 92 ee 08 	sts	0x08EE, r10	; 0x8008ee <__bss_end+0x7a8>
    72da:	b0 92 ef 08 	sts	0x08EF, r11	; 0x8008ef <__bss_end+0x7a9>
    72de:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    72e2:	70 92 60 00 	sts	0x0060, r7	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    72e6:	90 cf       	rjmp	.-224    	; 0x7208 <clchk+0x17a>

000072e8 <spi_transfer>:
	spi_mode(0);
}

static uint8_t spi_transfer(uint8_t value) {
	uint8_t cnt = 0xff;
	SPDR = value;
    72e8:	8e bd       	out	0x2e, r24	; 46
    72ea:	8f ef       	ldi	r24, 0xFF	; 255
    72ec:	81 50       	subi	r24, 0x01	; 1
	while (cnt -- && !(SPSR & (1 << SPIF)));
    72ee:	0d b4       	in	r0, 0x2d	; 45
    72f0:	07 fc       	sbrc	r0, 7
    72f2:	02 c0       	rjmp	.+4      	; 0x72f8 <spi_transfer+0x10>
    72f4:	81 11       	cpse	r24, r1
    72f6:	fa cf       	rjmp	.-12     	; 0x72ec <spi_transfer+0x4>
	return SPDR;
    72f8:	8e b5       	in	r24, 0x2e	; 46
}
    72fa:	08 95       	ret

000072fc <delay8>:
		CSN_PORT &= ~CSN_PIN;
}

#if 1
static void delay8(uint16_t count) {
	while (count --)
    72fc:	01 97       	sbiw	r24, 0x01	; 1
    72fe:	08 f4       	brcc	.+2      	; 0x7302 <delay8+0x6>
			"\tnop\n"
			"\tnop\n"
			"\tnop\n"
			"\twdr\n"
		);
}
    7300:	08 95       	ret
	...
		__asm__ __volatile__ (
    730e:	00 00       	nop
    7310:	a8 95       	wdr
    7312:	f4 cf       	rjmp	.-24     	; 0x72fc <delay8>

00007314 <nrf24_csn.part.0>:
		CSN_PORT |= CSN_PIN;
    7314:	2a 9a       	sbi	0x05, 2	; 5
}
    7316:	08 95       	ret

00007318 <nrf24_csn.constprop.8>:
		CSN_PORT &= ~CSN_PIN;
    7318:	2a 98       	cbi	0x05, 2	; 5
}
    731a:	08 95       	ret

0000731c <nrf24_write_addr_reg>:
	nrf24_csn(1);

	return ret;
}

static void nrf24_write_addr_reg(uint8_t addr, uint8_t value[5]) {
    731c:	1f 93       	push	r17
    731e:	cf 93       	push	r28
    7320:	df 93       	push	r29
    7322:	18 2f       	mov	r17, r24
    7324:	eb 01       	movw	r28, r22
	nrf24_csn(0);
    7326:	f8 df       	rcall	.-16     	; 0x7318 <nrf24_csn.constprop.8>

	spi_transfer(addr | W_REGISTER);
    7328:	81 2f       	mov	r24, r17
    732a:	80 62       	ori	r24, 0x20	; 32
    732c:	dd df       	rcall	.-70     	; 0x72e8 <spi_transfer>
	spi_transfer(value[0]);
    732e:	88 81       	ld	r24, Y
    7330:	db df       	rcall	.-74     	; 0x72e8 <spi_transfer>
	spi_transfer(value[1]);
    7332:	89 81       	ldd	r24, Y+1	; 0x01
    7334:	d9 df       	rcall	.-78     	; 0x72e8 <spi_transfer>
	spi_transfer(value[2]);
    7336:	8a 81       	ldd	r24, Y+2	; 0x02
    7338:	d7 df       	rcall	.-82     	; 0x72e8 <spi_transfer>
	spi_transfer(value[3]);
    733a:	8b 81       	ldd	r24, Y+3	; 0x03
    733c:	d5 df       	rcall	.-86     	; 0x72e8 <spi_transfer>
	spi_transfer(value[4]);
    733e:	8c 81       	ldd	r24, Y+4	; 0x04
    7340:	d3 df       	rcall	.-90     	; 0x72e8 <spi_transfer>

	nrf24_csn(1);
}
    7342:	df 91       	pop	r29
    7344:	cf 91       	pop	r28
    7346:	1f 91       	pop	r17
    7348:	e5 cf       	rjmp	.-54     	; 0x7314 <nrf24_csn.part.0>

0000734a <nrf24_write_reg>:
static void nrf24_write_reg(uint8_t addr, uint8_t value) {
    734a:	cf 93       	push	r28
    734c:	df 93       	push	r29
    734e:	d8 2f       	mov	r29, r24
	nrf24_csn(0);
    7350:	c6 2f       	mov	r28, r22
	spi_transfer(addr | W_REGISTER);
    7352:	e2 df       	rcall	.-60     	; 0x7318 <nrf24_csn.constprop.8>
    7354:	8d 2f       	mov	r24, r29
    7356:	80 62       	ori	r24, 0x20	; 32
    7358:	c7 df       	rcall	.-114    	; 0x72e8 <spi_transfer>
	spi_transfer(value);
    735a:	8c 2f       	mov	r24, r28
    735c:	c5 df       	rcall	.-118    	; 0x72e8 <spi_transfer>
    735e:	df 91       	pop	r29
}
    7360:	cf 91       	pop	r28
    7362:	d8 cf       	rjmp	.-80     	; 0x7314 <nrf24_csn.part.0>

00007364 <flash_led.constprop.5>:
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7364:	80 e3       	ldi	r24, 0x30	; 48
    7366:	9c ef       	ldi	r25, 0xFC	; 252
    7368:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    736c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
    7370:	81 e0       	ldi	r24, 0x01	; 1
    7372:	86 bb       	out	0x16, r24	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7374:	b0 9b       	sbis	0x16, 0	; 22
    7376:	fe cf       	rjmp	.-4      	; 0x7374 <flash_led.constprop.5+0x10>
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7378:	4d 9a       	sbi	0x09, 5	; 9

#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    737a:	a8 95       	wdr
    TCNT1 = -(F_CPU/(1024*16));
    737c:	80 e3       	ldi	r24, 0x30	; 48
    737e:	9c ef       	ldi	r25, 0xFC	; 252
    7380:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    7384:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
    7388:	81 e0       	ldi	r24, 0x01	; 1
    while(!(TIFR1 & _BV(TOV1)));
    738a:	86 bb       	out	0x16, r24	; 22
    738c:	b0 9b       	sbis	0x16, 0	; 22
  __asm__ __volatile__ (
    738e:	fe cf       	rjmp	.-4      	; 0x738c <flash_led.constprop.5+0x28>
}
    7390:	4d 9a       	sbi	0x09, 5	; 9
    7392:	a8 95       	wdr
    7394:	08 95       	ret

00007396 <nrf24_rx_mode>:
}

static uint8_t nrf24_in_rx = 0;

static void nrf24_rx_mode(void) {
	if (nrf24_in_rx)
    7396:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <nrf24_in_rx>
    739a:	81 11       	cpse	r24, r1
    739c:	0c c0       	rjmp	.+24     	; 0x73b6 <nrf24_rx_mode+0x20>
		return;

	/* Rx mode */
	nrf24_write_reg(CONFIG, CONFIG_VAL | (1 << PWR_UP) | (1 << PRIM_RX));
    739e:	6f e7       	ldi	r22, 0x7F	; 127
    73a0:	d4 df       	rcall	.-88     	; 0x734a <nrf24_write_reg>
    73a2:	62 e0       	ldi	r22, 0x02	; 2
	/* Only use data pipe 1 for receiving, pipe 0 is for TX ACKs */
	nrf24_write_reg(EN_RXADDR, 0x02);
    73a4:	82 e0       	ldi	r24, 0x02	; 2
    73a6:	d1 df       	rcall	.-94     	; 0x734a <nrf24_write_reg>
    73a8:	84 e1       	ldi	r24, 0x14	; 20
    73aa:	90 e0       	ldi	r25, 0x00	; 0
		my_delay(0.01);
    73ac:	a7 df       	rcall	.-178    	; 0x72fc <delay8>
    73ae:	28 9a       	sbi	0x05, 0	; 5
    73b0:	81 e0       	ldi	r24, 0x01	; 1
    73b2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <nrf24_in_rx>

	nrf24_ce(1);

	nrf24_in_rx = 1;
    73b6:	08 95       	ret

000073b8 <putch>:
void putch(char ch) {
    73b8:	df 92       	push	r13
    73ba:	ef 92       	push	r14
    73bc:	ff 92       	push	r15
    73be:	0f 93       	push	r16
    73c0:	1f 93       	push	r17
    73c2:	cf 93       	push	r28
    73c4:	df 93       	push	r29
  pkt_buf[pkt_len++] = ch;
    73c6:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <pkt_len.1918>
    73ca:	91 e0       	ldi	r25, 0x01	; 1
    73cc:	9e 0f       	add	r25, r30
    73ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <pkt_len.1918>
    73d2:	f0 e0       	ldi	r31, 0x00	; 0
    73d4:	ec 5d       	subi	r30, 0xDC	; 220
    73d6:	fe 4f       	sbci	r31, 0xFE	; 254
    73d8:	80 83       	st	Z, r24
  if (ch == STK_OK || pkt_len == pkt_max_len) {
    73da:	80 31       	cpi	r24, 0x10	; 16
    73dc:	19 f0       	breq	.+6      	; 0x73e4 <putch+0x2c>
    73de:	90 32       	cpi	r25, 0x20	; 32
    73e0:	09 f0       	breq	.+2      	; 0x73e4 <putch+0x2c>
    pkt_buf[0] = 0;
    73e2:	5c c0       	rjmp	.+184    	; 0x749c <putch+0xe4>
    73e4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <pkt_buf.1919>
#include "spi.h"
    73e8:	10 e8       	ldi	r17, 0x80	; 128
    73ea:	dd 24       	eor	r13, r13
    while (--cnt) {
    73ec:	d3 94       	inc	r13
    73ee:	11 50       	subi	r17, 0x01	; 1
      my_delay(4);
    73f0:	09 f4       	brne	.+2      	; 0x73f4 <putch+0x3c>
    73f2:	4c c0       	rjmp	.+152    	; 0x748c <putch+0xd4>
    73f4:	80 e4       	ldi	r24, 0x40	; 64
    73f6:	9f e1       	ldi	r25, 0x1F	; 31
      nrf24_tx(pkt_buf, pkt_len);
    73f8:	81 df       	rcall	.-254    	; 0x72fc <delay8>
#define CE_PIN		(1 << 0)
    73fa:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <pkt_len.1918>
    73fe:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <nrf24_in_rx>
/*                                                        */
    7402:	88 23       	and	r24, r24
/* TX or RX LEDs, or for people who like blinky lights.   */
    7404:	31 f0       	breq	.+12     	; 0x7412 <putch+0x5a>
#include "spi.h"
    7406:	80 e9       	ldi	r24, 0x90	; 144
 * NRWW memory
    7408:	91 e0       	ldi	r25, 0x01	; 1
    740a:	78 df       	rcall	.-272    	; 0x72fc <delay8>
 * continuing to run code from flash, slightly speeding up programming
    740c:	28 98       	cbi	0x05, 0	; 5
    740e:	d0 92 44 01 	sts	0x0144, r13	; 0x800144 <nrf24_in_rx>
    7412:	6e e7       	ldi	r22, 0x7E	; 126
/* Jan 2013						  */
    7414:	80 e0       	ldi	r24, 0x00	; 0
    7416:	99 df       	rcall	.-206    	; 0x734a <nrf24_write_reg>
/* 4.6 WestfW/dkinzer: pass reset cause to app in R2      */
    7418:	61 e0       	ldi	r22, 0x01	; 1
    741a:	82 e0       	ldi	r24, 0x02	; 2
    741c:	96 df       	rcall	.-212    	; 0x734a <nrf24_write_reg>
#define RAMSTART (0x100)
    741e:	7c df       	rcall	.-264    	; 0x7318 <nrf24_csn.constprop.8>
    7420:	81 ee       	ldi	r24, 0xE1	; 225
#elif defined (__AVR_ATmega644P__)
    7422:	62 df       	rcall	.-316    	; 0x72e8 <spi_transfer>
    7424:	77 df       	rcall	.-274    	; 0x7314 <nrf24_csn.part.0>
    7426:	78 df       	rcall	.-272    	; 0x7318 <nrf24_csn.constprop.8>
#define RAMSTART (0x100)
    7428:	80 ea       	ldi	r24, 0xA0	; 160
    742a:	5e df       	rcall	.-324    	; 0x72e8 <spi_transfer>
    742c:	c4 e2       	ldi	r28, 0x24	; 36
    742e:	d1 e0       	ldi	r29, 0x01	; 1
/* SOFT_UART:                                             */
    7430:	01 50       	subi	r16, 0x01	; 1
    7432:	08 f0       	brcs	.+2      	; 0x7436 <putch+0x7e>
    7434:	3b c0       	rjmp	.+118    	; 0x74ac <putch+0xf4>
    7436:	6e df       	rcall	.-292    	; 0x7314 <nrf24_csn.part.0>
/* LED_DATA_FLASH:                                        */
    7438:	84 e1       	ldi	r24, 0x14	; 20
/*  that brought the arduino repository up-to-date with   */
    743a:	90 e0       	ldi	r25, 0x00	; 0
    743c:	5f df       	rcall	.-322    	; 0x72fc <delay8>
/* Version 5 was created at the time of the new Makefile  */
    743e:	28 9a       	sbi	0x05, 0	; 5
    7440:	6b df       	rcall	.-298    	; 0x7318 <nrf24_csn.constprop.8>
    7442:	8f ef       	ldi	r24, 0xFF	; 255
    7444:	51 df       	rcall	.-350    	; 0x72e8 <spi_transfer>
    7446:	c8 2f       	mov	r28, r24
    7448:	65 df       	rcall	.-310    	; 0x7314 <nrf24_csn.part.0>
    744a:	80 e1       	ldi	r24, 0x10	; 16
    744c:	e8 2e       	mov	r14, r24
    744e:	87 e2       	ldi	r24, 0x27	; 39

    7450:	f8 2e       	mov	r15, r24
    7452:	dc 2f       	mov	r29, r28
    7454:	d0 72       	andi	r29, 0x20	; 32
    7456:	c5 ff       	sbrs	r28, 5
    7458:	02 c0       	rjmp	.+4      	; 0x745e <putch+0xa6>
    745a:	c0 ff       	sbrs	r28, 0
    745c:	06 c0       	rjmp	.+12     	; 0x746a <putch+0xb2>
    745e:	c4 fd       	sbrc	r28, 4
    7460:	04 c0       	rjmp	.+8      	; 0x746a <putch+0xb2>
    7462:	81 e0       	ldi	r24, 0x01	; 1
// TODO: get actual .bss+.data size from GCC
    7464:	e8 1a       	sub	r14, r24
/*                                                        */
    7466:	f1 08       	sbc	r15, r1
    7468:	21 f5       	brne	.+72     	; 0x74b2 <putch+0xfa>
    746a:	80 e9       	ldi	r24, 0x90	; 144
/* TX or RX LEDs, or for people who like blinky lights.   */
    746c:	91 e0       	ldi	r25, 0x01	; 1
 * Handle devices with up to 4 uarts (eg m1280.)  Rather inelegantly.
    746e:	46 df       	rcall	.-372    	; 0x72fc <delay8>
    7470:	28 98       	cbi	0x05, 0	; 5
    7472:	60 e3       	ldi	r22, 0x30	; 48
    7474:	87 e0       	ldi	r24, 0x07	; 7
 * differently.
    7476:	69 df       	rcall	.-302    	; 0x734a <nrf24_write_reg>
    7478:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <nrf24_in_rx>
    747c:	88 23       	and	r24, r24
 */
    747e:	19 f0       	breq	.+6      	; 0x7486 <putch+0xce>
    7480:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <nrf24_in_rx>
# define UART_SRA UCSR0A
    7484:	88 df       	rcall	.-240    	; 0x7396 <nrf24_rx_mode>
# define UART_SRL UBRR0L
    7486:	dd 23       	and	r29, r29
    7488:	09 f4       	brne	.+2      	; 0x748c <putch+0xd4>
    748a:	b1 cf       	rjmp	.-158    	; 0x73ee <putch+0x36>
    pkt_len = 1;
    748c:	81 e0       	ldi	r24, 0x01	; 1
    748e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pkt_len.1918>
    pkt_buf[0] ++;
    7492:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <pkt_buf.1919>
    7496:	8f 5f       	subi	r24, 0xFF	; 255
}
    7498:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <pkt_buf.1919>
    749c:	df 91       	pop	r29
    749e:	cf 91       	pop	r28
    74a0:	1f 91       	pop	r17
#define NRWWSTART (0xE000)
    74a2:	0f 91       	pop	r16
    74a4:	ff 90       	pop	r15
    74a6:	ef 90       	pop	r14
    74a8:	df 90       	pop	r13

    74aa:	08 95       	ret
    74ac:	89 91       	ld	r24, Y+
    74ae:	1c df       	rcall	.-456    	; 0x72e8 <spi_transfer>
    74b0:	bf cf       	rjmp	.-130    	; 0x7430 <putch+0x78>
/*  that brought the arduino repository up-to-date with   */
    74b2:	80 e2       	ldi	r24, 0x20	; 32
    74b4:	9e e4       	ldi	r25, 0x4E	; 78
/* Version 5 was created at the time of the new Makefile  */
    74b6:	22 df       	rcall	.-444    	; 0x72fc <delay8>
    74b8:	2f df       	rcall	.-418    	; 0x7318 <nrf24_csn.constprop.8>
    74ba:	8f ef       	ldi	r24, 0xFF	; 255
    74bc:	15 df       	rcall	.-470    	; 0x72e8 <spi_transfer>
    74be:	c8 2f       	mov	r28, r24
    74c0:	29 df       	rcall	.-430    	; 0x7314 <nrf24_csn.part.0>
    74c2:	c7 cf       	rjmp	.-114    	; 0x7452 <putch+0x9a>

000074c4 <getch>:
uint8_t getch(void) {
    74c4:	0f 93       	push	r16
    74c6:	1f 93       	push	r17
    74c8:	cf 93       	push	r28
        pkt_start = 1;
    74ca:	df 93       	push	r29
    if (pkt_len || nrf24_rx_fifo_data()) {
    74cc:	01 e0       	ldi	r16, 0x01	; 1
    74ce:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <pkt_len.1928>
/* UART:                                                  */
    74d2:	81 11       	cpse	r24, r1
    74d4:	3a c0       	rjmp	.+116    	; 0x754a <getch+0x86>
/* one hardware uart (644P, 1284P, etc)                   */
    74d6:	20 df       	rcall	.-448    	; 0x7318 <nrf24_csn.constprop.8>
    74d8:	87 e1       	ldi	r24, 0x17	; 23
    74da:	06 df       	rcall	.-500    	; 0x72e8 <spi_transfer>
/*                                                        */
    74dc:	80 e0       	ldi	r24, 0x00	; 0
    74de:	04 df       	rcall	.-504    	; 0x72e8 <spi_transfer>
    74e0:	c8 2f       	mov	r28, r24
    74e2:	18 df       	rcall	.-464    	; 0x7314 <nrf24_csn.part.0>
    74e4:	c0 fd       	sbrc	r28, 0
    74e6:	f3 cf       	rjmp	.-26     	; 0x74ce <getch+0xa>
    if (pkt_len || nrf24_rx_fifo_data()) {
    74e8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <pkt_len.1928>
      if (!pkt_len) {
    74ec:	81 11       	cpse	r24, r1
    74ee:	2d c0       	rjmp	.+90     	; 0x754a <getch+0x86>
    74f0:	a8 95       	wdr
    74f2:	60 e4       	ldi	r22, 0x40	; 64
}

static void nrf24_rx_read(uint8_t *buf, uint8_t *pkt_len) {
	uint8_t len;

	nrf24_write_reg(STATUS, 1 << RX_DR);
    74f4:	87 e0       	ldi	r24, 0x07	; 7
    74f6:	29 df       	rcall	.-430    	; 0x734a <nrf24_write_reg>
    74f8:	0f df       	rcall	.-482    	; 0x7318 <nrf24_csn.constprop.8>
    74fa:	80 e6       	ldi	r24, 0x60	; 96
	nrf24_csn(0);
    74fc:	f5 de       	rcall	.-534    	; 0x72e8 <spi_transfer>
    74fe:	80 e0       	ldi	r24, 0x00	; 0
	spi_transfer(R_RX_PL_WID);
    7500:	f3 de       	rcall	.-538    	; 0x72e8 <spi_transfer>
    7502:	18 2f       	mov	r17, r24
    7504:	07 df       	rcall	.-498    	; 0x7314 <nrf24_csn.part.0>
	ret = spi_transfer(0);
    7506:	10 93 23 01 	sts	0x0123, r17	; 0x800123 <pkt_len.1928>
    750a:	06 df       	rcall	.-500    	; 0x7318 <nrf24_csn.constprop.8>
    750c:	81 e6       	ldi	r24, 0x61	; 97
    750e:	ec de       	rcall	.-552    	; 0x72e8 <spi_transfer>
    7510:	c3 e0       	ldi	r28, 0x03	; 3

	len = nrf24_rx_data_avail();
	*pkt_len = len;
    7512:	d1 e0       	ldi	r29, 0x01	; 1
    7514:	11 50       	subi	r17, 0x01	; 1

	nrf24_csn(0);
    7516:	80 f4       	brcc	.+32     	; 0x7538 <getch+0x74>
    7518:	fd de       	rcall	.-518    	; 0x7314 <nrf24_csn.part.0>

	spi_transfer(R_RX_PAYLOAD);
    751a:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <__data_end>
    751e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <pkt_len.1928>
    7522:	88 23       	and	r24, r24
    7524:	a1 f2       	breq	.-88     	; 0x74ce <getch+0xa>
    7526:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pkt_buf.1930>
    752a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
        pkt_start = 1;
    752e:	92 13       	cpse	r25, r18
        if (!pkt_len)
    7530:	07 c0       	rjmp	.+14     	; 0x7540 <getch+0x7c>
    7532:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <pkt_len.1928>
        if (pkt_buf[0] == seqn) {
    7536:	cb cf       	rjmp	.-106    	; 0x74ce <getch+0xa>
    7538:	80 e0       	ldi	r24, 0x00	; 0
    753a:	d6 de       	rcall	.-596    	; 0x72e8 <spi_transfer>
    753c:	89 93       	st	Y+, r24
    753e:	ea cf       	rjmp	.-44     	; 0x7514 <getch+0x50>
          pkt_len = 0;
    7540:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
    7544:	81 50       	subi	r24, 0x01	; 1
	while (len --)
		*buf ++ = spi_transfer(0);
    7546:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <pkt_len.1928>
    754a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
    754e:	81 e0       	ldi	r24, 0x01	; 1
        seqn = pkt_buf[0];
    7550:	8e 0f       	add	r24, r30
        pkt_len--;
    7552:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
      ch = pkt_buf[pkt_start ++];
    7556:	f0 e0       	ldi	r31, 0x00	; 0
    7558:	ed 5f       	subi	r30, 0xFD	; 253
    755a:	fe 4f       	sbci	r31, 0xFE	; 254
    755c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <pkt_len.1928>
    7560:	81 50       	subi	r24, 0x01	; 1
    7562:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <pkt_len.1928>
      pkt_len --;
    7566:	80 81       	ld	r24, Z
    7568:	df 91       	pop	r29
    756a:	cf 91       	pop	r28
}
    756c:	1f 91       	pop	r17
    756e:	0f 91       	pop	r16
    7570:	08 95       	ret

00007572 <wait_timeout>:
	if (nrf24_in_rx) {
    7572:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <nrf24_in_rx>
    7576:	88 23       	and	r24, r24
    7578:	21 f0       	breq	.+8      	; 0x7582 <wait_timeout+0x10>
		my_delay(0.2);
    757a:	80 e9       	ldi	r24, 0x90	; 144
    757c:	91 e0       	ldi	r25, 0x01	; 1
    757e:	be de       	rcall	.-644    	; 0x72fc <delay8>
    7580:	28 98       	cbi	0x05, 0	; 5
		CE_PORT &= ~CE_PIN;
    7582:	6c e7       	ldi	r22, 0x7C	; 124
			nrf24_write_reg(CONFIG, CONFIG_VAL);
    7584:	80 e0       	ldi	r24, 0x00	; 0
    7586:	e1 de       	rcall	.-574    	; 0x734a <nrf24_write_reg>
    7588:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <nrf24_in_rx>
    758c:	88 e1       	ldi	r24, 0x18	; 24
    758e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7592:	88 e0       	ldi	r24, 0x08	; 8
    7594:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  WDTCSR = x;
    7598:	ff cf       	rjmp	.-2      	; 0x7598 <wait_timeout+0x26>

0000759a <verifySpace>:
  if (getch() != CRC_EOP)
    759a:	94 df       	rcall	.-216    	; 0x74c4 <getch>
    759c:	80 32       	cpi	r24, 0x20	; 32
    759e:	09 f0       	breq	.+2      	; 0x75a2 <verifySpace+0x8>
    75a0:	e8 df       	rcall	.-48     	; 0x7572 <wait_timeout>
    wait_timeout();
    75a2:	84 e1       	ldi	r24, 0x14	; 20
    75a4:	09 cf       	rjmp	.-494    	; 0x73b8 <putch>

000075a6 <getNch>:
void getNch(uint8_t count) {
    75a6:	cf 93       	push	r28
    75a8:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    75aa:	8c df       	rcall	.-232    	; 0x74c4 <getch>
    75ac:	c1 50       	subi	r28, 0x01	; 1
    75ae:	e9 f7       	brne	.-6      	; 0x75aa <getNch+0x4>
    75b0:	cf 91       	pop	r28
}
    75b2:	f3 cf       	rjmp	.-26     	; 0x759a <verifySpace>

000075b4 <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
    75b4:	e0 e6       	ldi	r30, 0x60	; 96
    75b6:	f0 e0       	ldi	r31, 0x00	; 0
    75b8:	98 e1       	ldi	r25, 0x18	; 24
    75ba:	90 83       	st	Z, r25
  WDTCSR = x;
    75bc:	80 83       	st	Z, r24
}
    75be:	08 95       	ret

000075c0 <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
    75c0:	e0 e6       	ldi	r30, 0x60	; 96
    75c2:	f0 e0       	ldi	r31, 0x00	; 0
    75c4:	98 e1       	ldi	r25, 0x18	; 24
    75c6:	90 83       	st	Z, r25
  WDTCSR = x;
    75c8:	10 82       	st	Z, r1
  watchdogConfig(WATCHDOG_OFF);

  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    75ca:	28 2e       	mov	r2, r24

  __asm__ __volatile__ (
    75cc:	ee 27       	eor	r30, r30
    75ce:	ff 27       	eor	r31, r31
    75d0:	09 94       	ijmp
